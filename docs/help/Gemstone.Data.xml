<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gemstone.Data</name>
  </assembly>
  <members>
    <member name="T:Gemstone.Data.AdoDataConnection">
      <summary>
            Creates a new <see cref="T:System.Data.Common.DbConnection" /> from any specified or configured ADO.NET data source.
            </summary>
      <remarks>
            Example connection and data provider strings:
            <list type="table"><listheader><term>Database type</term><description>Example connection string / data provider string</description></listheader><item><term>SQL Server</term><description>
                    ConnectionString = "Data Source=serverName; Initial Catalog=databaseName; User ID=userName; Password=password"<br />
                    DataProviderString = "AssemblyName=Microsoft.Data.SqlClient; ConnectionType=Microsoft.Data.SqlClient.SqlConnection"
                    </description></item><item><term>SQLite</term><description>
                    ConnectionString = "Data Source=databaseName.db; Version=3; Foreign Keys=True; FailIfMissing=True"<br />
                    DataProviderString = "AssemblyName=Microsoft.Data.Sqlite; ConnectionType=Microsoft.Data.Sqlite.SqliteConnection"
                    </description></item><item><term>PostgreSQL</term><description>
                    ConnectionString = "Host=localhost; Database=DatabaseName; Username=postgres; Password=password"<br />
                    DataProviderString = "AssemblyName=Npgsql; ConnectionType=Npgsql.NpgsqlConnection"
                    </description></item><item><term>MySQL</term><description>
                    ConnectionString = "Server=serverName; Database=databaseName; Uid=root; Pwd=password; allow user variables = true"<br />
                    DataProviderString = "AssemblyName=MySql.Data; ConnectionType=MySql.Data.MySqlClient.MySqlConnection"
                    </description></item><item><term>Oracle</term><description>
                    ConnectionString = "Data Source=tnsName; User ID=schemaUserName; Password=schemaPassword"<br />
                    DataProviderString = "AssemblyName=Oracle.ManagedDataAccess; ConnectionType=Oracle.ManagedDataAccess.Client.OracleConnection"
                    </description></item></list>
            Example configuration file that defines connection settings:
            <code language="cs">
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;configuration&gt;
              &lt;configSections&gt;
                &lt;section name="categorizedSettings" type="GSF.Configuration.CategorizedSettingsSection, GSF.Core" /&gt;
              &lt;/configSections&gt;
              &lt;categorizedSettings&gt;
                &lt;systemSettings&gt;
                  &lt;add name="ConnectionString" value="Data Source=localhost\SQLEXPRESS; Initial Catalog=MyDatabase; Integrated Security=SSPI" description="ADO database connection string" encrypted="false" /&gt;
                  &lt;add name="DataProviderString" value="AssemblyName={System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}; ConnectionType=System.Data.SqlClient.SqlConnection" description="ADO database provider string" encrypted="false" /&gt;
                &lt;/systemSettings&gt;
              &lt;/categorizedSettings&gt;
              &lt;startup&gt;
                &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" /&gt;
              &lt;/startup&gt;
            &lt;/configuration&gt;
            </code></remarks>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.#ctor(Gemstone.Configuration.Settings)">
      <summary>
            Creates and opens a new <see cref="T:Gemstone.Data.AdoDataConnection" /> from specified <paramref name="settings" />.
            </summary>
      <param name="settings">Settings instance.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.AdoDataConnection" /> from specified <paramref name="connection" />.
            </summary>
      <param name="connection">The database connection.</param>
      <param name="disposeConnection">True if the database connection should be closed when the <see cref="T:Gemstone.Data.AdoDataConnection" /> is disposed; false otherwise.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.#ctor(System.String,System.String)">
      <summary>
            Creates and opens a new <see cref="T:Gemstone.Data.AdoDataConnection" /> from specified <paramref name="connectionString" /> and <paramref name="dataProviderString" />.
            </summary>
      <param name="connectionString">Database specific ADO connection string.</param>
      <param name="dataProviderString">Key/value pairs that define which ADO assembly and types to load.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.#ctor(System.String,System.Type)">
      <summary>
            Creates and opens a new <see cref="T:Gemstone.Data.AdoDataConnection" /> from specified <paramref name="connectionString" />
            and <paramref name="connectionType" />.
            </summary>
      <param name="connectionString">Database specific ADO connection string.</param>
      <param name="connectionType">The ADO type used to establish the database connection.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.Bool(System.Boolean)">
      <summary>
            Returns proper <see cref="T:System.Boolean" /> implementation for connected <see cref="T:Gemstone.Data.AdoDataConnection" /> database type.
            </summary>
      <param name="value">
        <see cref="T:System.Boolean" /> to format per database type.</param>
      <returns>Proper <see cref="T:System.Boolean" /> implementation for connected <see cref="T:Gemstone.Data.AdoDataConnection" /> database type.</returns>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.Connection">
      <summary>
            Gets an open <see cref="T:System.Data.Common.DbConnection" /> to configured ADO.NET data source.
            </summary>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.DatabaseType">
      <summary>
            Gets or sets the type of the database underlying the <see cref="T:Gemstone.Data.AdoDataConnection" />.
            </summary>
      <remarks>
            This value is automatically assigned based on the connection type specified in the data provider string, however,
            if the database type cannot be determined it will be set to <see cref="F:Gemstone.Data.DatabaseType.Other" />. In this
            case, if you know the behavior of your custom ADO database connection matches that of another defined database
            type, you can manually assign the database type to allow for database interaction interoperability.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.DefaultIsolationLevel">
      <summary>
            Gets the default <see cref="T:System.Data.IsolationLevel" /> for the connected <see cref="T:Gemstone.Data.AdoDataConnection" /> database type.
            </summary>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.DefaultTimeout">
      <summary>
            Gets or sets default timeout for <see cref="T:Gemstone.Data.AdoDataConnection" /> data operations.
            </summary>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.DefineSettings(Gemstone.Configuration.Settings,System.String)">
      <summary>
            Establishes default settings for the config file.
            </summary>
      <param name="settings">Settings instance used to hold configuration.</param>
      <param name="settingsCategory">The config file settings category under which the settings are defined.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.Data.AdoDataConnection" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.Data.AdoDataConnection" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.EscapeIdentifier(System.String,System.Boolean)">
      <summary>
            Escapes an identifier, e.g., a table or field name, using the common delimiter for the connected <see cref="T:Gemstone.Data.AdoDataConnection" />
            database type or the standard ANSI escaping delimiter, i.e., double-quotes, based on the <paramref name="useAnsiQuotes" /> flag.
            </summary>
      <param name="identifier">Field name to escape.</param>
      <param name="useAnsiQuotes">Force use of double-quote for identifier delimiter, per SQL-99 standard, regardless of database type.</param>
      <returns>Escaped identifier name.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> value cannot be null, empty or whitespace.</exception>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteNonQuery(System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the number of rows affected.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteNonQuery(System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the number of rows affected.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteNonQueryAsync(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the number of rows affected.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteNonQueryAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the number of rows affected.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteReader(System.Data.CommandBehavior,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteReader(System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteReader(System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteReaderAsync(System.Data.CommandBehavior,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteReaderAsync(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteReaderAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(System.Int32,System.String,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar(System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(System.String,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar(System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar(System.Type,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar(System.Type,System.Object,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar(System.Type,System.Object,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar(System.Type,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(``0,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(``0,System.Int32,System.String,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(``0,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalar``1(``0,System.String,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(System.String,System.Threading.CancellationToken,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync(System.Type,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync(System.Type,System.Object,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync(System.Type,System.Object,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync(System.Type,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <paramref name="returnType" />.
            </summary>
      <param name="returnType">The type to which the result of the query should be converted.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(``0,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(``0,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(``0,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the value in the first column 
            of the first row in the result set as type <typeparamref name="T" />, substituting <paramref name="defaultValue" />
            if <see cref="F:System.DBNull.Value" /> is retrieved.
            </summary>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Gemstone.Data.AdoDataConnection.ExecuteScalarAsync``1(``0,System.String,System.Threading.CancellationToken,System.Object[])</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScript(System.IO.TextReader)">
      <summary>
            Executes the given SQL script using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />.
            </summary>
      <param name="scriptReader">The reader used to extract SQL statements to be executed.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ExecuteScript(System.String)">
      <summary>
            Executes the given SQL script using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />.
            </summary>
      <param name="scriptPath">The path to the SQL script.</param>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.Data.AdoDataConnection" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.Guid(System.Data.DataRow,System.String)">
      <summary>
            Retrieves <see cref="T:System.Guid" /> from a <see cref="T:System.Data.DataRow" /> field based on database type.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> from which value needs to be retrieved.</param>
      <param name="fieldName">Name of the field which contains <see cref="T:System.Guid" />.</param>
      <returns>
        <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.Guid(System.Guid)">
      <summary>
            Returns proper <see cref="T:System.Guid" /> implementation for connected <see cref="T:Gemstone.Data.AdoDataConnection" /> database type.
            </summary>
      <param name="value">
        <see cref="T:System.Guid" /> to format per database type.</param>
      <returns>Proper <see cref="T:System.Guid" /> implementation for connected <see cref="T:Gemstone.Data.AdoDataConnection" /> database type.</returns>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.IsJetEngine">
      <summary>
            Gets a value to indicate whether source database is Microsoft Access.
            </summary>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.IsMySQL">
      <summary>
            Gets a value to indicate whether source database is MySQL.
            </summary>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.IsOracle">
      <summary>
            Gets a value to indicate whether source database is Oracle.
            </summary>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.IsPostgreSQL">
      <summary>
            Gets a value to indicate whether source database is PostgreSQL.
            </summary>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.IsSqlite">
      <summary>
            Gets a value to indicate whether source database is SQLite.
            </summary>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.IsSQLServer">
      <summary>
            Gets a value to indicate whether source database is Microsoft SQL Server.
            </summary>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ParameterizedQueryString(System.String,System.String[])">
      <summary>
            Creates a parameterized query string for the underlying database type based on the given format string and parameter names.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="parameterNames">A string array that contains zero or more parameter names to format.</param>
      <returns>A parameterized query string based on the given format and parameter names.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveData(System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains at least one table.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveData(System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains at least one table.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsAsyncEnumerable(System.Data.DataTable,System.Data.CommandBehavior,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" /> using a <see cref="T:System.Data.Common.DbDataReader" /> and returns
            data rows based on the provided <paramref name="schema" /> as an asynchronous enumerable.
            </summary>
      <param name="schema">
        <see cref="T:System.Data.DataTable" /> that defines the schema for the data rows.</param>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>An asynchronous enumerable of <see cref="T:System.Data.DataRow" /> objects.</returns>
      <remarks>
            If provided <paramref name="schema" /> does not match the schema of the result set based on <paramref name="sqlFormat" />,
            the results may be unpredictable or method call may fail.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsAsyncEnumerable(System.Data.DataTable,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" /> using a <see cref="T:System.Data.Common.DbDataReader" /> and returns
            data rows based on the provided <paramref name="schema" /> as an asynchronous enumerable.
            </summary>
      <param name="schema">
        <see cref="T:System.Data.DataTable" /> that defines the schema for the data rows.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>An asynchronous enumerable of <see cref="T:System.Data.DataRow" /> objects.</returns>
      <remarks>
            If provided <paramref name="schema" /> does not match the schema of the result set based on <paramref name="sqlFormat" />,
            the results may be unpredictable or method call may fail.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsAsyncEnumerable(System.Data.DataTable,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" /> using a <see cref="T:System.Data.Common.DbDataReader" /> and returns
            data rows based on the provided <paramref name="schema" /> as an asynchronous enumerable.
            </summary>
      <param name="schema">
        <see cref="T:System.Data.DataTable" /> that defines the schema for the data rows.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>An asynchronous enumerable of <see cref="T:System.Data.DataRow" /> objects.</returns>
      <remarks>
            If provided <paramref name="schema" /> does not match the schema of the result set based on <paramref name="sqlFormat" />,
            the results may be unpredictable or method call may fail.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsAsyncEnumerable(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataTable" />
            of result set, if the result set contains at least one table, as an asynchronous enumerable.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>An asynchronous enumerable of <see cref="T:System.Data.DataRow" /> objects.</returns>
      <remarks>
            This method first reads data into memory as a <see cref="T:System.Data.DataTable" /> then enumerates over its rows.
            If the <see cref="T:System.Data.DataTable" /> schema can be derived in advance, use the
            <see cref="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsAsyncEnumerable(System.Data.DataTable,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])" />
            overload instead that takes the schema and uses a <see cref="T:System.Data.Common.DbDataReader" /> to enumerate over the
            rows directly without caching into memory first as an optimization.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsAsyncEnumerable(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataTable" />
            of result set, if the result set contains at least one table, as an asynchronous enumerable.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>An asynchronous enumerable of <see cref="T:System.Data.DataRow" /> objects.</returns>
      <remarks>
            This method first reads data into memory as a <see cref="T:System.Data.DataTable" /> then enumerates over its rows.
            If the <see cref="T:System.Data.DataTable" /> schema can be derived in advance, use the
            <see cref="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsAsyncEnumerable(System.Data.DataTable,System.String,System.Threading.CancellationToken,System.Object[])" />
            overload instead that takes the schema and uses a <see cref="T:System.Data.Common.DbDataReader" /> to enumerate over the
            rows directly without caching into memory first as an optimization.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsync(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains at least one table.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains at least one table.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataSet(System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataSet(System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataSetAsync(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveDataSetAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveRow(System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveRow(System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveRowAsync(System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.RetrieveRowAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="P:Gemstone.Data.AdoDataConnection.Connection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="sqlFormat">Format string for the SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.AdoDataConnection.ToDataProviderString(System.Type)">
      <summary>
            Generates a data provider string for the given connection type.
            </summary>
      <param name="connectionType">The type used to establish a connection to the database.</param>
      <returns>The data provider string for the given connection type.</returns>
    </member>
    <member name="P:Gemstone.Data.AdoDataConnection.UtcNow">
      <summary>
            Gets current UTC date-time in an implementation that is proper for the connected <see cref="T:Gemstone.Data.AdoDataConnection" /> database type.
            </summary>
    </member>
    <member name="T:Gemstone.Data.BulkDataOperationBase">
      <summary>
            This class defines a common set of functionality that any bulk data operation implementation can use 
            </summary>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.#ctor">
      <summary>
            Default Constructor
            </summary>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)">
      <summary>
            Constructor with parameters
            </summary>
      <param name="fromSchema">Source Schema</param>
      <param name="toSchema">Destination Schema</param>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.#ctor(System.String,System.String)">
      <summary>
            Constructor with parameters
            </summary>
      <param name="fromConnectString">Source database connection string</param>
      <param name="toConnectString">Destination database connection string</param>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.Analyze">
      <summary>
            Analyze data schema before data processing
            </summary>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.Close">
      <summary>
            Close source and destination schema
            </summary>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.Dispose(System.Boolean)">
      <summary>
            Dispose
            </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Gemstone.Data.BulkDataOperationBase</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Gemstone.Data.BulkDataOperationBase.ExcludedTables">
      <summary>
            Get list of tables to be excluded during data processing
            </summary>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.Execute">
      <summary>
            Executes bulk data operation.
            </summary>
    </member>
    <member name="P:Gemstone.Data.BulkDataOperationBase.FromSchema">
      <summary>
            Get or set Source schema
            </summary>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.OnOverallProgress(System.Int32,System.Int32)">
      <summary>
            Raise an event to show overall progress of data processing
            </summary>
      <param name="current">Current index of tables in data processing</param>
      <param name="total">Total table count in data processing</param>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.OnRowProgress(System.String,System.Int32,System.Int32)">
      <summary>
            Raise an event while change row in data processing
            </summary>
      <param name="tableName">Table name in data processing</param>
      <param name="currentRow">current row index in data processing</param>
      <param name="totalRows">total rows needs to be process in data processing</param>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.OnSQLFailure(System.String,System.Exception)">
      <summary>
            Raise an event if SQL statement fail
            </summary>
      <param name="sql">SQL statement information</param>
      <param name="ex">exception information</param>
    </member>
    <member name="M:Gemstone.Data.BulkDataOperationBase.OnTableProgress(System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Raise an event if table change in data processing
            </summary>
      <param name="tableName">Table name in data processing</param>
      <param name="executed">Status of data processing on table</param>
      <param name="currentTable">current table index in data processing</param>
      <param name="totalTables">total table count in data processing</param>
    </member>
    <member name="F:Gemstone.Data.BulkDataOperationBase.OverallProgress">
      <summary>
            Implementer can use this variable to track overall progress 
            </summary>
    </member>
    <member name="E:Gemstone.Data.BulkDataOperationBase.OverallProgressStatus">
      <summary>
            Get the information of overall progress of Migration utility
            </summary>
    </member>
    <member name="F:Gemstone.Data.BulkDataOperationBase.OverallTotal">
      <summary>
            This is initialized to the overall total number of records to be processed 
            </summary>
    </member>
    <member name="E:Gemstone.Data.BulkDataOperationBase.RowProgressStatus">
      <summary>
            Get the information of Row progress of table
            </summary>
    </member>
    <member name="P:Gemstone.Data.BulkDataOperationBase.RowReportInterval">
      <summary>
            Get or set number of rows to process before raising progress events
            </summary>
    </member>
    <member name="E:Gemstone.Data.BulkDataOperationBase.SQLFailure">
      <summary>
            Get the information of exception while processing SQL statement
            </summary>
    </member>
    <member name="F:Gemstone.Data.BulkDataOperationBase.TableCollection">
      <summary>
            Tables value 
            </summary>
    </member>
    <member name="E:Gemstone.Data.BulkDataOperationBase.TableProgressStatus">
      <summary>
            Get the status information of table progress
            </summary>
    </member>
    <member name="P:Gemstone.Data.BulkDataOperationBase.Timeout">
      <summary>
            Get or set Maximum number of seconds to wait when processing a SQL command before timing out.
            </summary>
    </member>
    <member name="P:Gemstone.Data.BulkDataOperationBase.ToSchema">
      <summary>
            Get or set destination schema
            </summary>
    </member>
    <member name="P:Gemstone.Data.BulkDataOperationBase.UseFromSchemaReferentialIntegrity">
      <summary>
            Get or set - use referential integrity information from source/to destination database during data processing
            </summary>
    </member>
    <member name="F:Gemstone.Data.BulkDataOperationBase.UseFromSchemaRi">
      <summary>
            Flag to check referential integrity
            </summary>
    </member>
    <member name="P:Gemstone.Data.BulkDataOperationBase.WorkTables">
      <summary>
            These are the tables that were found in both source and destination to be used for data operation...
            </summary>
    </member>
    <member name="T:Gemstone.Data.DatabaseType">
      <summary>
            Specifies the database type underlying an <see cref="T:Gemstone.Data.AdoDataConnection" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DatabaseType.Access">
      <summary>
            Underlying ADO database type is Microsoft Access.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DatabaseType.SQLServer">
      <summary>
            Underlying ADO database type is SQL Server.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DatabaseType.MySQL">
      <summary>
            Underlying ADO database type is MySQL.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DatabaseType.Oracle">
      <summary>
            Underlying ADO database type is Oracle.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DatabaseType.SQLite">
      <summary>
            Underlying ADO database type is SQLite.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DatabaseType.PostgreSQL">
      <summary>
            Underlying ADO database type is PostgreSQL.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DatabaseType.Other">
      <summary>
            Underlying ADO database type is unknown.
            </summary>
    </member>
    <member name="T:Gemstone.Data.DataDeleter">
      <summary>
            This class defines a common set of functionality that any data operation implementation can use 
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataDeleter.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataDeleter" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataDeleter.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataDeleter" />.
            </summary>
      <param name="fromSchema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromSchema</parameter>
            <parameter>M:Gemstone.Data.DataDeleter.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)</parameter>
          </include>
        </markup>
      </param>
      <param name="toSchema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toSchema</parameter>
            <parameter>M:Gemstone.Data.DataDeleter.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.Data.DataDeleter.#ctor(System.String,System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataDeleter" />.
            </summary>
      <param name="fromConnectString">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromConnectString</parameter>
            <parameter>M:Gemstone.Data.DataDeleter.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="toConnectString">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toConnectString</parameter>
            <parameter>M:Gemstone.Data.DataDeleter.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.Data.DataDeleter.Close">
      <summary>
            Close
            </summary>
    </member>
    <member name="E:Gemstone.Data.DataDeleter.Disposed">
      <summary>
            Disposed event.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataDeleter.Execute">
      <summary>
            Execute this <see cref="T:Gemstone.Data.DataDeleter" /></summary>
    </member>
    <member name="T:Gemstone.Data.DataInserter">
      <summary>
            This class defines a common set of functionality that any data operation implementation can use 
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataInserter.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataInserter" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataInserter.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataInserter" />.
            </summary>
      <param name="fromSchema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromSchema</parameter>
            <parameter>M:Gemstone.Data.DataInserter.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)</parameter>
          </include>
        </markup>
      </param>
      <param name="toSchema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toSchema</parameter>
            <parameter>M:Gemstone.Data.DataInserter.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.Data.DataInserter.#ctor(System.String,System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataInserter" />.
            </summary>
      <param name="fromConnectString">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromConnectString</parameter>
            <parameter>M:Gemstone.Data.DataInserter.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="toConnectString">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toConnectString</parameter>
            <parameter>M:Gemstone.Data.DataInserter.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Gemstone.Data.DataInserter.AttemptBulkInsert">
      <summary>
            Get or set to attempt use of a BULK INSERT on a destination SQL Server connection
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.AttemptTruncateTable">
      <summary>
            Set to True to attempt use of a TRUNCATE TABLE on a destination SQL Server connection if ClearDestinationTables is True
            and it looks like the referential integrity definition supports this.  Your SQL Server connection will need the rights
            to perform this operation.
            </summary>
    </member>
    <member name="E:Gemstone.Data.DataInserter.BulkInsertCompleted">
      <summary>
            Bulk-insert completed event.
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.BulkInsertEncoding">
      <summary>
            This setting defines the text encoding that will be used when writing a temporary BULK INSERT file that will be needed
            if a SQL Server BULK INSERT is performed - make sure the encoding output matches the specified CODEPAGE value in the
            BulkInsertSettings property.
            </summary>
    </member>
    <member name="E:Gemstone.Data.DataInserter.BulkInsertException">
      <summary>
            Bulk-insert exception event.
            </summary>
    </member>
    <member name="E:Gemstone.Data.DataInserter.BulkInsertExecuting">
      <summary>
            Bulk-insert executing event.
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.BulkInsertFilePath">
      <summary>
            This setting defines the file path that will be used when writing a temporary BULK INSERT file that will be needed if a
            SQL Server BULK INSERT is performed - make sure the destination SQL Server has rights to this path.
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.BulkInsertSettings">
      <summary>
            This setting defines the SQL Server BULK INSERT settings that will be used if a BULK INSERT is performed. 
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.ClearDestinationTables">
      <summary>
            Set to True to clear all data from the destination database before processing data inserts.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataInserter.Close">
      <summary>
            Close
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.DelimiterReplacement">
      <summary>
            This specifies the string that will be substituted for the field terminator or row terminator if encountered in a database
            value while creating a BULK INSERT file.  The field terminator and row terminator values are defined in the BulkInsertSettings
            property specified by the FIELDTERMINATOR and ROWTERMINATOR keywords respectively.
            </summary>
    </member>
    <member name="E:Gemstone.Data.DataInserter.Disposed">
      <summary>
            Disposed event.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataInserter.Execute">
      <summary>
            Execute this <see cref="T:Gemstone.Data.DataInserter" /></summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.ForceBulkInsert">
      <summary>
            Get or set to force use of a BULK INSERT on a destination SQL Server connection regardless of whether or not it looks
            like the referential integrity definition supports this.
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.ForceTruncateTable">
      <summary>
            Set to True to force use of a TRUNCATE TABLE on a destination SQL Server connection if ClearDestinationTables is True regardless
            of whether or not it looks like the referential integrity definition supports this.  Your SQL Server connection will need the
            rights to perform this operation
            </summary>
    </member>
    <member name="P:Gemstone.Data.DataInserter.PreserveAutoIncValues">
      <summary>
            Set to True to preserve primary key value data to the destination database before processing data inserts.
            </summary>
    </member>
    <member name="E:Gemstone.Data.DataInserter.TableCleared">
      <summary>
            Table cleared event.
            </summary>
    </member>
    <member name="T:Gemstone.Data.DataSetEqualityComparer">
      <summary>
            Equality comparer for <see cref="T:System.Data.DataSet" /> objects.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetEqualityComparer.Default">
      <summary>
            Default instance of the <see cref="T:Gemstone.Data.DataSetEqualityComparer" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataSetEqualityComparer.Equals(System.Data.DataSet,System.Data.DataSet)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:System.Data.DataSet" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:System.Data.DataSet" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Gemstone.Data.DataSetEqualityComparer.GetHashCode(System.Data.DataSet)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Data.DataSet" /> for which a hash code is to be returned.</param>
      <returns>
            A hash code for the specified object.
            </returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Gemstone.Data.DataUpdater">
      <summary>
            This class defines a common set of functionality that any data operation implementation can use 
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataUpdater.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataUpdater" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataUpdater.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataUpdater" />.
            </summary>
      <param name="fromSchema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromSchema</parameter>
            <parameter>M:Gemstone.Data.DataUpdater.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)</parameter>
          </include>
        </markup>
      </param>
      <param name="toSchema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toSchema</parameter>
            <parameter>M:Gemstone.Data.DataUpdater.#ctor(Gemstone.Data.Schema,Gemstone.Data.Schema)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.Data.DataUpdater.#ctor(System.String,System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.DataUpdater" />.
            </summary>
      <param name="fromConnectString">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fromConnectString</parameter>
            <parameter>M:Gemstone.Data.DataUpdater.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="toConnectString">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toConnectString</parameter>
            <parameter>M:Gemstone.Data.DataUpdater.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.Data.DataUpdater.Close">
      <summary>
            Close
            </summary>
    </member>
    <member name="E:Gemstone.Data.DataUpdater.Disposed">
      <summary>
            Disposed event.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataUpdater.Execute">
      <summary>
            Execute this <see cref="T:Gemstone.Data.DataUpdater" /></summary>
    </member>
    <member name="T:Gemstone.Data.Field">
      <summary>
            Represents a database field.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Field.#ctor(System.String,Gemstone.Data.OleDbType)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Field" />.
            </summary>
      <param name="name">Field name.</param>
      <param name="type">OLEDB data type for field.</param>
    </member>
    <member name="P:Gemstone.Data.Field.AllowsNulls">
      <summary>
            Get or set Allow Null flag
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.AutoIncrement">
      <summary>
            Get or set Auto increment flag
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.AutoIncrementSeed">
      <summary>
            Get or set Auto increment seed
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.AutoIncrementStep">
      <summary>
            Get or set Auto increment step
            </summary>
    </member>
    <member name="M:Gemstone.Data.Field.CompareTo(System.Object)">
      <summary>
            Compare <paramref name="obj" /> ordinal to current field <see cref="P:Gemstone.Data.Field.Ordinal" /></summary>
      <param name="obj">Check <paramref name="obj" /> type <see cref="T:System.Object" />, if it is type of <see cref="T:Gemstone.Data.Field" /> then compare to <see cref="P:Gemstone.Data.Field.Ordinal" /> of <paramref name="obj" /> else throw <see cref="T:System.ArgumentException" /></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Field.CompareTo(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.Field.DateTimePrecision">
      <summary>
            Get or set date time precision
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.DefaultValue">
      <summary>
            Get or set default value
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.Description">
      <summary>
            Get or set description
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.ForeignKeys">
      <summary>
            Get or set list of <see cref="T:Gemstone.Data.ForeignKeyFields" /></summary>
    </member>
    <member name="P:Gemstone.Data.Field.HasDefault">
      <summary>
            Get or set has default value flag
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.IsForeignKey">
      <summary>
            Get or set foreign key flag. if <see cref="T:Gemstone.Data.Field" /> is <see cref="P:Gemstone.Data.Field.ReferencedBy" /> then true else false
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.IsPrimaryKey">
      <summary>
            Get or set flag to check <see cref="T:Gemstone.Data.Field" /> is primary key or not
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.MaxLength">
      <summary>
            Get or set maximum length of field
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.Name">
      <summary>
            Get Field Name 
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.NonNullNativeValue">
      <summary>
            Gets the native value for the field (SQL Encoded).
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.NumericPrecision">
      <summary>
            Get or set numeric precision
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.NumericScale">
      <summary>
            Get or set Numeric scale
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.Ordinal">
      <summary>
            Get or set file ordinal
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.Parent">
      <summary>
            Get or set <see cref="T:Gemstone.Data.Fields" /> parent
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.PrimaryKeyName">
      <summary>
            Get or set primary key name
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.PrimaryKeyOrdinal">
      <summary>
            Get or set ordinal for Primary key field
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.ReadOnly">
      <summary>
            Get or set read-only flag
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.ReferencedBy">
      <summary>
            Get or set - check <see cref="T:Gemstone.Data.Field" /> is reference by
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.SQLEncodedValue">
      <summary>
            Change <see cref="T:Gemstone.Data.Field" /> value to encoded string. It will check <see cref="P:Gemstone.Data.Field.Type" />  and <see cref="P:Gemstone.Data.Field.Parent" /> value before convert to <see cref="T:Gemstone.Data.OleDbType" /> compatible value
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.SQLEscapedName">
      <summary>
            Get SQL escaped name of <see cref="P:Gemstone.Data.Field.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Field.Table">
      <summary>
            Get or set <see cref="T:Gemstone.Data.Field" />'s parent <see cref="P:Gemstone.Data.Field.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Field.Type">
      <summary>
            Get <see cref="T:Gemstone.Data.OleDbType" /> Type
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.Unique">
      <summary>
            Get or set for unique
            </summary>
    </member>
    <member name="P:Gemstone.Data.Field.Value">
      <summary>
            Get or set value of <see cref="T:Gemstone.Data.Field" /></summary>
    </member>
    <member name="T:Gemstone.Data.Fields">
      <summary>
            Represents a collection of <see cref="T:Gemstone.Data.Field" /> values.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Fields.Add(Gemstone.Data.Field)">
      <summary>
            Add new <see cref="T:Gemstone.Data.Field" /> to this collection.
            </summary>
      <param name="newField">Field to add.</param>
    </member>
    <member name="M:Gemstone.Data.Fields.Clear">
      <summary>
            Clears the field list.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Fields.Count">
      <summary>
            Get count of collection of <see cref="T:Gemstone.Data.Field" /></summary>
    </member>
    <member name="M:Gemstone.Data.Fields.GetEnumerator">
      <summary>
            Get <see cref="T:System.Collections.Generic.IEnumerator`1" /> type of <see cref="T:Gemstone.Data.Field" /> list.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Fields.GetEnumerator</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Data.Fields.GetList(System.Boolean,System.Func{System.String,System.String})">
      <summary>
            Get comma separated list of <see cref="T:Gemstone.Data.Field" /></summary>
      <param name="returnAutoInc"></param>
      <param name="sqlEscapeFunction"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Fields.GetList(System.Boolean,System.Func{System.String,System.String})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.Fields.Item(System.Int32)">
      <summary>
            Indexer property of Field
            </summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="P:Gemstone.Data.Fields.Item(System.String)">
      <summary>
            Indexer property of Field by Name
            </summary>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="P:Gemstone.Data.Fields.Parent">
      <summary>
            Get <see cref="T:Gemstone.Data.Field" />'s parent <see cref="T:Gemstone.Data.Table" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Fields.Remove(Gemstone.Data.Field)">
      <summary>
            Removes <see cref="T:Gemstone.Data.Field" /> from the collection.
            </summary>
      <param name="field">Field to remove.</param>
    </member>
    <member name="T:Gemstone.Data.ForeignKeyField">
      <summary>
            Represents a database foreign key field.
            </summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyField.DeleteRule">
      <summary>
            Get or set delete rule for <see cref="T:Gemstone.Data.ReferentialAction" /> for <see cref="T:Gemstone.Data.Field" /></summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyField.ForeignKey">
      <summary>
            Get or set Foreign key field
            </summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyField.KeyName">
      <summary>
            Get or set name of key
            </summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyField.Ordinal">
      <summary>
            Get or set ordinal of <see cref="T:Gemstone.Data.Field" /></summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyField.Parent">
      <summary>
            Get foreign key parent information
            </summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyField.PrimaryKey">
      <summary>
            Get or set Primary key field
            </summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyField.UpdateRule">
      <summary>
            Get or set update rule for <see cref="T:Gemstone.Data.ReferentialAction" /> for <see cref="T:Gemstone.Data.Field" /></summary>
    </member>
    <member name="T:Gemstone.Data.ForeignKeyFields">
      <summary>
            Represents a collection of <see cref="T:Gemstone.Data.ForeignKeyField" /> values.
            </summary>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyFields.Count">
      <summary>
            Get count of <see cref="T:Gemstone.Data.ForeignKeyFields" /> list
            </summary>
    </member>
    <member name="M:Gemstone.Data.ForeignKeyFields.GetEnumerator">
      <summary>
            Get <see cref="T:System.Collections.IEnumerator" /> of field lists
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.ForeignKeyFields.GetEnumerator</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Data.ForeignKeyFields.GetList">
      <summary>
            Get comma separated <see cref="T:System.String" /> of <see cref="T:Gemstone.Data.ForeignKeyField" /></summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.ForeignKeyFields.GetList</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyFields.Item(System.Int32)">
      <summary>
            Get the current index of foreign key field information
            </summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyFields.Item(System.String)">
      <summary>
            Get the current <see cref="T:Gemstone.Data.ForeignKeyField" /> information by name
            </summary>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="P:Gemstone.Data.ForeignKeyFields.Parent">
      <summary>
            Get or set field parent information
            </summary>
    </member>
    <member name="T:Gemstone.Data.IBulkDataOperation">
      <summary>
            This is the common interface for any bulk data operation
            </summary>
    </member>
    <member name="M:Gemstone.Data.IBulkDataOperation.Close">
      <summary>
            Close the object connection
            </summary>
    </member>
    <member name="M:Gemstone.Data.IBulkDataOperation.Execute">
      <summary>
            Execute a method of object
            </summary>
    </member>
    <member name="P:Gemstone.Data.IBulkDataOperation.FromSchema">
      <summary>
            From schema information
            </summary>
    </member>
    <member name="E:Gemstone.Data.IBulkDataOperation.OverallProgressStatus">
      <summary>
            Get the information of overall progress of Migration utility
            </summary>
    </member>
    <member name="E:Gemstone.Data.IBulkDataOperation.RowProgressStatus">
      <summary>
            Get the information of Row progress of table
            </summary>
    </member>
    <member name="P:Gemstone.Data.IBulkDataOperation.RowReportInterval">
      <summary>
            Get the row report interval information
            </summary>
    </member>
    <member name="E:Gemstone.Data.IBulkDataOperation.SQLFailure">
      <summary>
            Get the information of exception while processing SQL statement
            </summary>
    </member>
    <member name="E:Gemstone.Data.IBulkDataOperation.TableProgressStatus">
      <summary>
            Get the status information of table progress
            </summary>
    </member>
    <member name="P:Gemstone.Data.IBulkDataOperation.Timeout">
      <summary>
            Get or set time out for SQL statement
            </summary>
    </member>
    <member name="P:Gemstone.Data.IBulkDataOperation.ToSchema">
      <summary>
            To Schema information
            </summary>
    </member>
    <member name="P:Gemstone.Data.IBulkDataOperation.WorkTables">
      <summary>
            Get the work table information
            </summary>
    </member>
    <member name="T:Gemstone.Data.OleDbType">
      <summary>Specifies the data type of a field, a property.</summary>
      <remarks>
            Copied from <c>System.Data.OleDb.OleDbParameter</c> in the .NET Framework.
            </remarks>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Empty">
      <summary>No value (DBTYPE_EMPTY).</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.SmallInt">
      <summary>A 16-bit signed integer (DBTYPE_I2). This maps to <see cref="T:System.Int16" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Integer">
      <summary>A 32-bit signed integer (DBTYPE_I4). This maps to <see cref="T:System.Int32" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Single">
      <summary>A floating-point number within the range of -3.40E +38 through 3.40E +38 (DBTYPE_R4). This maps to <see cref="T:System.Single" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Double">
      <summary>A floating-point number within the range of -1.79E +308 through 1.79E +308 (DBTYPE_R8). This maps to <see cref="T:System.Double" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Currency">
      <summary>A currency value ranging from -2 63 (or -922,337,203,685,477.5808) to 2 63 -1 (or +922,337,203,685,477.5807) with an accuracy to a ten-thousandth of a currency unit (DBTYPE_CY). This maps to <see cref="T:System.Decimal" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Date">
      <summary>Date data, stored as a double (DBTYPE_DATE). The whole portion is the number of days since December 30, 1899, and the fractional portion is a fraction of a day. This maps to <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.BSTR">
      <summary>A null-terminated character string of Unicode characters (DBTYPE_BSTR). This maps to <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.IDispatch">
      <summary>A pointer to an <see langword="IDispatch" /> interface (DBTYPE_IDISPATCH). This maps to <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Error">
      <summary>A 32-bit error code (DBTYPE_ERROR). This maps to <see cref="T:System.Exception" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Boolean">
      <summary>A Boolean value (DBTYPE_BOOL). This maps to <see cref="T:System.Boolean" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Variant">
      <summary>A special data type that can contain numeric, string, binary, or date data, and also the special values Empty and Null (DBTYPE_VARIANT). This type is assumed if no other is specified. This maps to <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.IUnknown">
      <summary>A pointer to an <see langword="IUnknown" /> interface (DBTYPE_UNKNOWN). This maps to <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Decimal">
      <summary>A fixed precision and scale numeric value between -10 38 -1 and 10 38 -1 (DBTYPE_DECIMAL). This maps to <see cref="T:System.Decimal" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.TinyInt">
      <summary>A 8-bit signed integer (DBTYPE_I1). This maps to <see cref="T:System.SByte" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.UnsignedTinyInt">
      <summary>A 8-bit unsigned integer (DBTYPE_UI1). This maps to <see cref="T:System.Byte" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.UnsignedSmallInt">
      <summary>A 16-bit unsigned integer (DBTYPE_UI2). This maps to <see cref="T:System.UInt16" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.UnsignedInt">
      <summary>A 32-bit unsigned integer (DBTYPE_UI4). This maps to <see cref="T:System.UInt32" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.BigInt">
      <summary>A 64-bit signed integer (DBTYPE_I8). This maps to <see cref="T:System.Int64" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.UnsignedBigInt">
      <summary>A 64-bit unsigned integer (DBTYPE_UI8). This maps to <see cref="T:System.UInt64" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Filetime">
      <summary>A 64-bit unsigned integer representing the number of 100-nanosecond intervals since January 1, 1601 (DBTYPE_FILETIME). This maps to <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Guid">
      <summary>A globally unique identifier (or GUID) (DBTYPE_GUID). This maps to <see cref="T:System.Guid" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Binary">
      <summary>A stream of binary data (DBTYPE_BYTES). This maps to an <see cref="T:System.Array" /> of type <see cref="T:System.Byte" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Char">
      <summary>A character string (DBTYPE_STR). This maps to <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.WChar">
      <summary>A null-terminated stream of Unicode characters (DBTYPE_WSTR). This maps to <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.Numeric">
      <summary>An exact numeric value with a fixed precision and scale (DBTYPE_NUMERIC). This maps to <see cref="T:System.Decimal" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.DBDate">
      <summary>Date data in the format yyyymmdd (DBTYPE_DBDATE). This maps to <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.DBTime">
      <summary>Time data in the format hhmmss (DBTYPE_DBTIME). This maps to <see cref="T:System.TimeSpan" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.DBTimeStamp">
      <summary>Data and time data in the format yyyymmddhhmmss (DBTYPE_DBTIMESTAMP). This maps to <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.PropVariant">
      <summary>An automation PROPVARIANT (DBTYPE_PROP_VARIANT). This maps to <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.VarNumeric">
      <summary>A variable-length numeric value (<see cref="T:System.Data.OleDb.OleDbParameter" /> only). This maps to <see cref="T:System.Decimal" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.VarChar">
      <summary>A variable-length stream of non-Unicode characters (<see cref="T:System.Data.OleDb.OleDbParameter" /> only). This maps to <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.LongVarChar">
      <summary>A long string value (<see cref="T:System.Data.OleDb.OleDbParameter" /> only). This maps to <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.VarWChar">
      <summary>A variable-length, null-terminated stream of Unicode characters (<see cref="T:System.Data.OleDb.OleDbParameter" /> only). This maps to <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.LongVarWChar">
      <summary>A long null-terminated Unicode string value (<see cref="T:System.Data.OleDb.OleDbParameter" /> only). This maps to <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.VarBinary">
      <summary>A variable-length stream of binary data (<see cref="T:System.Data.OleDb.OleDbParameter" /> only). This maps to an <see cref="T:System.Array" /> of type <see cref="T:System.Byte" />.</summary>
    </member>
    <member name="F:Gemstone.Data.OleDbType.LongVarBinary">
      <summary>A long binary value (<see cref="T:System.Data.OleDb.OleDbParameter" /> only). This maps to an <see cref="T:System.Array" /> of type <see cref="T:System.Byte" />.</summary>
    </member>
    <member name="T:Gemstone.Data.ReferentialAction">
      <summary>
            Specified the type of referential action on database object/Tables
            </summary>
    </member>
    <member name="F:Gemstone.Data.ReferentialAction.Cascade">
      <summary>
            Action Type is cascade
            </summary>
    </member>
    <member name="F:Gemstone.Data.ReferentialAction.SetNull">
      <summary>
            Action Type is to set null
            </summary>
    </member>
    <member name="F:Gemstone.Data.ReferentialAction.SetDefault">
      <summary>
            Action Type is to set default
            </summary>
    </member>
    <member name="F:Gemstone.Data.ReferentialAction.NoAction">
      <summary>
            No Action
            </summary>
    </member>
    <member name="T:Gemstone.Data.Schema">
      <summary>
            Get information about database schema
            </summary>
    </member>
    <member name="M:Gemstone.Data.Schema.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Schema" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Schema.#ctor(System.String,Gemstone.Data.TableType,System.Boolean,System.Boolean)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Schema" />.
            </summary>
      <param name="connectionString">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>connectionString</parameter>
            <parameter>M:Gemstone.Data.Schema.#ctor(System.String,Gemstone.Data.TableType,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="tableTypeRestriction">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tableTypeRestriction</parameter>
            <parameter>M:Gemstone.Data.Schema.#ctor(System.String,Gemstone.Data.TableType,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="immediateClose">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>immediateClose</parameter>
            <parameter>M:Gemstone.Data.Schema.#ctor(System.String,Gemstone.Data.TableType,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="analyzeNow">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>analyzeNow</parameter>
            <parameter>M:Gemstone.Data.Schema.#ctor(System.String,Gemstone.Data.TableType,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Gemstone.Data.Schema.AllowNumericNulls">
      <summary>
            Set this value to False to convert all Null values encountered in numeric fields to zeros.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Schema.AllowTextNulls">
      <summary>
            Set this value to False to convert all Null values encountered in character fields to empty strings.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Schema.Analyze">
      <summary>
            Analyze data schema for processing data
            </summary>
    </member>
    <member name="M:Gemstone.Data.Schema.Close">
      <summary>
            Close <see cref="T:System.Data.IDbConnection" /></summary>
    </member>
    <member name="P:Gemstone.Data.Schema.Connection">
      <summary>
        <see cref="T:System.Data.IDbConnection" /> to open a database connection
            </summary>
    </member>
    <member name="P:Gemstone.Data.Schema.ConnectionString">
      <summary>
            OLEDB connection string to data source to analyze.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Schema.DataSourceType">
      <summary>
            Type of database specified in connect string.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Schema.ImmediateClose">
      <summary>
            Set this value to False to keep the schema connection used during analysis open after analysis is complete.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Schema.NoRestriction">
      <summary>
            Defines a table filter that specifies no restrictions.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Schema.OpenConnection(System.String)">
      <summary>
            Opens an ADO connection.
            </summary>
      <param name="connectionString">ADO connection string.</param>
      <returns>Opened connection.</returns>
    </member>
    <member name="M:Gemstone.Data.Schema.OpenConnection(System.String,Gemstone.Data.DatabaseType@,Gemstone.Data.Schema@,System.Boolean@)">
      <summary>
            Opens an ADO connection.
            </summary>
      <param name="connectionString">ADO connection string.</param>
      <param name="databaseType">Database type.</param>
      <param name="deserializedSchema">The deserialized schema.</param>
      <param name="isAdoConnection">Flag that determines if connection is ADO.</param>
      <returns>Opened connection.</returns>
    </member>
    <member name="M:Gemstone.Data.Schema.SQLEscapeName(System.String)">
      <summary>
            Escapes a field or table name.
            </summary>
      <param name="name">Name to escape.</param>
      <returns>Escaped <paramref name="name" />.</returns>
    </member>
    <member name="P:Gemstone.Data.Schema.Tables">
      <summary>
            Get or set - information to process <see cref="P:Gemstone.Data.Schema.Tables" /></summary>
    </member>
    <member name="P:Gemstone.Data.Schema.TableTypeRestriction">
      <summary>
            Set this value to restrict the types of tables returned in your schema.  Table types can be OR'd together to create this table type restriction.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Table">
      <summary>
            Get data table information for data processing
            </summary>
    </member>
    <member name="M:Gemstone.Data.Table.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Table" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Table.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Table" />.
            </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Gemstone.Data.Table.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.Data.Table.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Table" />.
            </summary>
      <param name="catalog">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>catalog</parameter>
            <parameter>M:Gemstone.Data.Table.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="schema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>schema</parameter>
            <parameter>M:Gemstone.Data.Table.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Gemstone.Data.Table.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Gemstone.Data.Table.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="description">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>description</parameter>
            <parameter>M:Gemstone.Data.Table.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="rows">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rows</parameter>
            <parameter>M:Gemstone.Data.Table.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Gemstone.Data.Table.AutoIncField">
      <summary>
            Gets auto-increment field for the <see cref="T:Gemstone.Data.Table" />, if any.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Table.CalculateRowCount">
      <summary>
            Calculates row count.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.Catalog">
      <summary>
            Get or set catalog information for <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="M:Gemstone.Data.Table.CompareTo(Gemstone.Data.Table)">
      <summary>
            Compare Table with other <see cref="T:Gemstone.Data.Table" /> object <see cref="P:Gemstone.Data.Table.Priority" /></summary>
      <param name="other"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Table.CompareTo(Gemstone.Data.Table)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Data.Table.CompareTo(System.Object)">
      <summary>
            Compare <see cref="T:System.Object" /> type of <paramref name="obj" /> with <see cref="T:Gemstone.Data.Table" /> object <see cref="P:Gemstone.Data.Table.Priority" /></summary>
      <param name="obj"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Table.CompareTo(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.Table.Connection">
      <summary>
            Get <see cref="T:System.Data.IDbConnection" /> of object
            </summary>
    </member>
    <member name="M:Gemstone.Data.Table.DefineForeignKey(System.String,System.String,System.String,System.Int32,System.String,Gemstone.Data.ReferentialAction,Gemstone.Data.ReferentialAction)">
      <summary>
            Check for <see cref="T:Gemstone.Data.ForeignKeyField" /></summary>
      <param name="primaryKeyFieldName"></param>
      <param name="foreignKeyTableName"></param>
      <param name="foreignKeyFieldName"></param>
      <param name="foreignKeyOrdinal"></param>
      <param name="foreignKeyName"></param>
      <param name="foreignKeyUpdateRule"></param>
      <param name="foreignKeyDeleteRule"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Table.DefineForeignKey(System.String,System.String,System.String,System.Int32,System.String,Gemstone.Data.ReferentialAction,Gemstone.Data.ReferentialAction)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Data.Table.DefinePrimaryKey(System.String,System.Int32,System.String)">
      <summary>
            check for primary key field in <see cref="T:Gemstone.Data.Table" /></summary>
      <param name="fieldName"></param>
      <param name="primaryKeyOrdinal"></param>
      <param name="primaryKeyName"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Table.DefinePrimaryKey(System.String,System.Int32,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.Table.Description">
      <summary>
            Get or set description
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.Fields">
      <summary>
            Get or set list of <see cref="P:Gemstone.Data.Table.Fields" /> for <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.FullName">
      <summary>
            Get or set full name of <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.HasAutoIncField">
      <summary>
            Gets flag that determines if the <see cref="T:Gemstone.Data.Table" /> has an auto-increment field.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.IdentitySQL">
      <summary>
            Get or set identity SQL for <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.IsForeignKeyTable">
      <summary>
            Get flag of any foreign key <see cref="T:Gemstone.Data.Field" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.IsLinked">
      <summary>
            Get flag for <see cref="T:Gemstone.Data.TableType" /> alias or link
            </summary>
    </member>
    <member name="M:Gemstone.Data.Table.IsReferencedBy(Gemstone.Data.Table)">
      <summary>
            Check for direct table reference by <paramref name="otherTable" />.
            </summary>
      <param name="otherTable">Table to check for relation.</param>
      <returns>
        <c>true</c> if directly referenced; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Data.Table.IsReferencedVia(Gemstone.Data.Table)">
      <summary>
            Checks for indirect table reference through <paramref name="otherTable" />.
            </summary>
      <param name="otherTable">Table to check for relation.</param>
      <returns>
        <c>true</c> if indirectly referenced; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Gemstone.Data.Table.IsSystem">
      <summary>
            Check for system tables and system views
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.IsTemporary">
      <summary>
            Get flag for <see cref="T:Gemstone.Data.TableType" />  for temp
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.IsView">
      <summary>
            Check for object is view
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.MapName">
      <summary>
            Get or set name of <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.Name">
      <summary>
            Get name of <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.Parent">
      <summary>
            Get parent <see cref="T:Gemstone.Data.Table" /> information
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.PrimaryKeyFieldCount">
      <summary>
            Get count for primary key <see cref="T:Gemstone.Data.Field" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.Priority">
      <summary>
            Get or set priority 
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.Process">
      <summary>
            Get or set process flag
            </summary>
    </member>
    <member name="M:Gemstone.Data.Table.ReevalulateIdentitySQL">
      <summary>
            Re-evaluates identity SQL for database type.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.ReferencedByForeignKeys">
      <summary>
            Get flag that determines if the table has any foreign keys.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.RowCount">
      <summary>
            Get row count in <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="P:Gemstone.Data.Table.Schema">
      <summary>
            Get or set schema name
            </summary>
    </member>
    <member name="P:Gemstone.Data.Table.SQLEscapedName">
      <summary>
            Get SQL escaped name of <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="M:Gemstone.Data.Table.ToString">
      <summary>
            Gets display name for table.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Table.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.Table.Type">
      <summary>
            Get <see cref="T:Gemstone.Data.TableType" /></summary>
    </member>
    <member name="M:Gemstone.Data.Table.UsesDefaultSchema">
      <summary>
            Get schema information flag based on <see cref="T:Gemstone.Data.DatabaseType" /></summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Table.UsesDefaultSchema</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Gemstone.Data.Tables">
      <summary>
            List of <see cref="T:Gemstone.Data.Table" /> collection
            </summary>
    </member>
    <member name="M:Gemstone.Data.Tables.Add(Gemstone.Data.Table)">
      <summary>
            Adds new table.
            </summary>
      <param name="table">Table to add.</param>
    </member>
    <member name="M:Gemstone.Data.Tables.Clear">
      <summary>
            Clears all tables.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Tables.Count">
      <summary>
            Gets table count.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Tables.FindByMapName(System.String)">
      <summary>
            Finds table by mapped named.
            </summary>
      <param name="mapName">Mapped table name.</param>
      <returns>Table with mapped name.</returns>
    </member>
    <member name="M:Gemstone.Data.Tables.GetEnumerator">
      <summary>
            Gets table enumerator.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Tables.GetEnumerator</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Data.Tables.GetList">
      <summary>
            Gets table field list.
            </summary>
      <returns>Comma separated field list.</returns>
    </member>
    <member name="P:Gemstone.Data.Tables.Item(System.Int32)">
      <summary>
            Gets table at index.
            </summary>
      <param name="index">Index of table</param>
      <returns>Table at index.</returns>
    </member>
    <member name="P:Gemstone.Data.Tables.Item(System.String)">
      <summary>
            Gets table by name.
            </summary>
      <param name="name">Table name.</param>
      <returns>Table with specified name.</returns>
    </member>
    <member name="P:Gemstone.Data.Tables.Parent">
      <summary>
            Gets or sets parent <see cref="T:Gemstone.Data.Schema" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Tables.Remove(Gemstone.Data.Table)">
      <summary>
            Removes table.
            </summary>
      <param name="table">Table to remove.</param>
    </member>
    <member name="T:Gemstone.Data.Tables.ReferentialOrderComparer">
      <summary>
            Check for referential order of <see cref="T:Gemstone.Data.Table" /></summary>
    </member>
    <member name="M:Gemstone.Data.Tables.ReferentialOrderComparer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Data.Tables.ReferentialOrderComparer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Data.Tables.ReferentialOrderComparer.Compare(Gemstone.Data.Table,Gemstone.Data.Table)">
      <summary>
            Allows tables to be sorted in proper referential integrity process object
            </summary>
      <param name="table1">First table to compare.</param>
      <param name="table2">Second table to compare.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Tables.ReferentialOrderComparer.Compare(Gemstone.Data.Table,Gemstone.Data.Table)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Gemstone.Data.Tables.ReferentialOrderComparer.Default">
      <summary>
            Default property of object
            </summary>
    </member>
    <member name="T:Gemstone.Data.TableType">
      <summary>
            Specifies the type of object in database
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.Table">
      <summary>
            Database object is DataTable
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.View">
      <summary>
            Database object is View
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.SystemTable">
      <summary>
            Database object is System Defined Table
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.SystemView">
      <summary>
            Database object is System Defined View
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.Alias">
      <summary>
            Database object is Alias
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.Synonym">
      <summary>
            Database object is Synonym
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.GlobalTemp">
      <summary>
            Database object is Global Temp 
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.LocalTemp">
      <summary>
            Database object is local Temp
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.Link">
      <summary>
            Database object is Link
            </summary>
    </member>
    <member name="F:Gemstone.Data.TableType.Undetermined">
      <summary>
            Database object is not defined
            </summary>
    </member>
    <member name="T:Gemstone.Data.DataExtensions.DataExtensions">
      <summary>
            Defines extension functions related to database and SQL interaction.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.AddParametersWithValues(System.Data.Common.DbCommand,System.String,System.Object[])">
      <summary>
            Creates and adds a new <see cref="T:System.Data.Common.DbParameter" /> for each of the specified <paramref name="values" /> to the <see cref="T:System.Data.Common.DbCommand" /> object.
            </summary>
      <param name="command">
        <see cref="T:System.Data.Common.DbCommand" /> to which parameters need to be added.</param>
      <param name="sql">The SQL statement.</param>
      <param name="values">The values for the parameters of the <see cref="T:System.Data.Common.DbCommand" /> in the order that they appear in the SQL statement.</param>
      <returns>The fully populated parameterized command.</returns>
      <remarks>
        <para>
            This method does very rudimentary parsing of the SQL statement so parameter names should start with the '@'
            character and should be surrounded by either spaces, parentheses, or commas.
            </para>
        <para>
            Do not use the same parameter name twice in the expression so that each parameter, identified by '@', will
            have a corresponding value.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentException">Number of <see cref="T:System.Data.Common.DbParameter" /> arguments in <paramref name="sql" /> expression, identified by '@', do not match number of supplied parameter <paramref name="values" />.</exception>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.AddParameterWithValue(System.Data.Common.DbCommand,System.String,System.Object,System.Data.ParameterDirection)">
      <summary>
            Creates and adds an <see cref="T:System.Data.Common.DbParameter" /> to the <see cref="T:System.Data.Common.DbCommand" /> object with the specified <paramref name="value" />.
            </summary>
      <param name="command">
        <see cref="T:System.Data.Common.DbCommand" /> to which parameter needs to be added.</param>
      <param name="name">Name of the <see cref="T:System.Data.Common.DbParameter" /> to be added.</param>
      <param name="value">Value of the <see cref="T:System.Data.Common.DbParameter" /> to be added.</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> for <see cref="T:System.Data.Common.DbParameter" />.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.AsAsyncEnumerable(System.Data.DataTable)">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of <see cref="T:System.Data.DataRow" /> values from the <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="source">The source <see cref="T:System.Data.DataTable" /> to make async enumerable.</param>
      <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of <see cref="T:System.Data.DataRow" /> values from the <see cref="T:System.Data.DataTable" />.</returns>
      <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Data.DataTable" /> is <c>null</c>&gt;.</exception>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.AsAwaitConfiguredCancelableAsyncEnumerable(System.Data.DataTable,System.Threading.CancellationToken,System.Boolean)">
      <summary>
            Returns a cancellable <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of <see cref="T:System.Data.DataRow" /> values from the <see cref="T:System.Data.DataTable" />
            and configures how awaits on the tasks returned from an async iteration will be performed.
            </summary>
      <param name="source">The source <see cref="T:System.Data.DataTable" /> to make async enumerable.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
      <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of <see cref="T:System.Data.DataRow" /> values from the <see cref="T:System.Data.DataTable" />.</returns>
      <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Data.DataTable" /> is <c>null</c>&gt;.</exception>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ConvertField``1(System.Data.DataRow,System.String)">
      <summary>
            Provides strongly-typed access to each of the column values in the specified row.
            Automatically applies type conversion to the column values.
            </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the instance for the extension method.</param>
      <param name="field">The name of the column to return the value of.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <returns>The value, of type T, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="field" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ConvertField(System.Data.DataRow,System.String,System.Type)">
      <summary>
            Automatically applies type conversion to column values when only a type is available.
            </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the instance for the extension method.</param>
      <param name="field">The name of the column to return the value of.</param>
      <param name="type">Type of the column.</param>
      <returns>The value of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="field" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ConvertField(System.Data.DataRow,System.String,System.Type,System.Object)">
      <summary>
            Automatically applies type conversion to column values when only a type is available.
            </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the instance for the extension method.</param>
      <param name="field">The name of the column to return the value of.</param>
      <param name="type">Type of the column.</param>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <returns>The value of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="field" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ConvertField``1(System.Data.DataRow,System.String,``0)">
      <summary>
            Provides strongly-typed access to each of the column values in the specified row.
            Automatically applies type conversion to the column values.
            </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the instance for the extension method.</param>
      <param name="field">The name of the column to return the value of.</param>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <returns>The value, of type T, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="field" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ConvertGuidField(System.Data.DataRow,System.String,System.Nullable{System.Guid})">
      <summary>
            Parses a Guid from a database field that is a Guid type or a string representing a Guid.
            </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the instance for the extension method.</param>
      <param name="field">The name of the column to return the value of.</param>
      <param name="defaultValue">The value to be substituted if <see cref="F:System.DBNull.Value" /> is retrieved; defaults to <see cref="F:System.Guid.Empty" />.</param>
      <returns>The <see cref="T:System.Guid" /> value of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="field" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ConvertNullableField``1(System.Data.DataRow,System.String)">
      <summary>
            Provides strongly-typed access to each of the column values in the specified row.
            Automatically applies type conversion to the column values.
            </summary>
      <param name="row">The input <see cref="T:System.Data.DataRow" />, which acts as the instance for the extension method.</param>
      <param name="field">The name of the column to return the value of.</param>
      <typeparam name="T">A generic parameter that specifies the return type of the column.</typeparam>
      <returns>The value, of type T, of the <see cref="T:System.Data.DataColumn" /> specified by <paramref name="field" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.CreateParameterizedCommand(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Creates and returns a parameterized <see cref="T:System.Data.Common.DbCommand" />. Parameter names are embedded in the SQL statement
            passed as a parameter to this method.
            </summary>
      <param name="connection">The database connection.</param>
      <param name="sql">The SQL statement.</param>
      <param name="values">The values for the parameters of the <see cref="T:System.Data.Common.DbCommand" /> in the order that they appear in the SQL statement.</param>
      <returns>The fully populated parameterized command.</returns>
      <remarks>
        <para>
            This method does very rudimentary parsing of the SQL statement so parameter names should start with the '@'
            character and should be surrounded by either spaces, parentheses, or commas.
            </para>
        <para>
            Do not use the same parameter name twice in the expression so that each parameter, identified by '@', will
            have a corresponding value.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentException">Number of <see cref="T:System.Data.Common.DbParameter" /> arguments in <paramref name="sql" /> expression, identified by '@', do not match number of supplied parameter <paramref name="values" />.</exception>
    </member>
    <member name="F:Gemstone.Data.DataExtensions.DataExtensions.DefaultTimeoutDuration">
      <summary>
            The default timeout duration used for executing SQL statements when timeout duration is not specified.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteMySQLScript(System.Data.Common.DbConnection,System.IO.TextReader)">
      <summary>
            Executes the statements defined in the given MySQL script.
            </summary>
      <param name="connection">The connection used to execute SQL statements.</param>
      <param name="scriptReader">The reader used to extract statements from the SQL script.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteMySQLScript(System.Data.Common.DbConnection,System.String)">
      <summary>
            Executes the statements defined in the given MySQL script.
            </summary>
      <param name="connection">The connection used to execute SQL statements.</param>
      <param name="scriptPath">The path to the SQL script.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQuery(System.Data.Common.DbCommand,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the number of rows affected.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQuery(System.Data.Common.DbCommand,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the number of rows affected.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the number of rows affected.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the number of rows affected.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQueryAsync(System.Data.Common.DbCommand,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the number of rows affected.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQueryAsync(System.Data.Common.DbCommand,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the number of rows affected.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQueryAsync(System.Data.Common.DbConnection,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the number of rows affected.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteNonQueryAsync(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the number of rows affected.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteOracleScript(System.Data.Common.DbConnection,System.IO.TextReader)">
      <summary>
            Executes the statements defined in the given Oracle database script.
            </summary>
      <param name="connection">The connection used to execute SQL statements.</param>
      <param name="scriptReader">The reader used to extract statements from the SQL script.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteOracleScript(System.Data.Common.DbConnection,System.String)">
      <summary>
            Executes the statements defined in the given Oracle database script.
            </summary>
      <param name="connection">The connection used to execute SQL statements.</param>
      <param name="scriptPath">The path to the SQL script.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReader(System.Data.Common.DbCommand,System.Int32,System.String,System.Data.CommandBehavior,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReader(System.Data.Common.DbCommand,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReader(System.Data.Common.DbCommand,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReader(System.Data.Common.DbConnection,System.Int32,System.String,System.Data.CommandBehavior,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReader(System.Data.Common.DbConnection,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Int32,System.String,System.Data.CommandBehavior,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReaderAsync(System.Data.Common.DbConnection,System.Int32,System.String,System.Data.CommandBehavior,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReaderAsync(System.Data.Common.DbConnection,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteReaderAsync(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and builds a <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object and its associated command.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalar(System.Data.Common.DbCommand,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalar(System.Data.Common.DbCommand,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalar(System.Data.Common.DbConnection,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalarAsync(System.Data.Common.DbCommand,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalarAsync(System.Data.Common.DbCommand,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalarAsync(System.Data.Common.DbConnection,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the value in the first column 
            of the first row in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>Value in the first column of the first row in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteTSQLScript(System.Data.Common.DbConnection,System.IO.TextReader)">
      <summary>
            Executes the statements defined in the given TSQL script.
            </summary>
      <param name="connection">The connection used to execute SQL statements.</param>
      <param name="scriptReader">The reader used to extract statements from the SQL script.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ExecuteTSQLScript(System.Data.Common.DbConnection,System.String)">
      <summary>
            Executes the statements defined in the given TSQL script.
            </summary>
      <param name="connection">The connection used to execute SQL statements.</param>
      <param name="scriptPath">The path to the SQL script.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.NullAsDBNull(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Gets any <c>null</c> parameter values as <see cref="T:System.DBNull" />.
            </summary>
      <param name="values">Source parameter values.</param>
      <returns>Parameter values with <c>null</c> replaced with <see cref="T:System.DBNull" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.PopulateParameters(Microsoft.Data.SqlClient.SqlCommand,System.Object,System.Object[])">
      <summary>
            Takes the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object and populates it with the given parameters.
            </summary>
      <param name="command">The <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> whose parameters are to be populated.</param>
      <param name="parameter1">The first parameter value to populate the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> parameters with.</param>
      <param name="parameters">The remaining parameter values to populate the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> parameters with.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.PopulateParameters(Microsoft.Data.SqlClient.SqlCommand,System.Object[])">
      <summary>
             Takes the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object and populates it with the given parameters.
            </summary>
      <param name="command">The <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> whose parameters are to be populated.</param>
      <param name="parameters">The parameter values to populate the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> parameters with.</param>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.PopulateParameters``1(``0,System.Action{``0},System.Object[])">
      <summary>
            Takes the <see cref="T:System.Data.Common.DbCommand" /> object and populates it with the given parameters.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> whose parameters are to be populated.</param>
      <param name="deriveParameters">The DeriveParameters() implementation of the <paramref name="command" /> to use to populate parameters.</param>
      <param name="values">The parameter values to populate the <see cref="T:System.Data.Common.DbCommand" /> parameters with.</param>
      <typeparam name="TDbCommand">Then <see cref="T:System.Data.Common.DbCommand" /> type to be used.</typeparam>
      <exception cref="T:System.ArgumentException">
            Number of <see cref="T:System.Data.Common.DbParameter" /> arguments in <see cref="P:System.Data.Common.DbCommand.CommandText" /> of this <paramref name="command" />, identified by '@', do not match number of supplied parameter <paramref name="values" /> -or-
            You have supplied more <paramref name="values" /> than parameters listed for the stored procedure.
            </exception>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveData(System.Data.Common.DbCommand,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveData(System.Data.Common.DbCommand,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveData(System.Data.Common.DbConnection,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveData(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataAsync(System.Data.Common.DbCommand,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataAsync(System.Data.Common.DbCommand,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataAsync(System.Data.Common.DbConnection,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataAsync(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataTable" /> 
            of result set, if the result set contains multiple tables.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSet(System.Data.Common.DbCommand,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSet(System.Data.Common.DbCommand,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSet(System.Data.Common.DbConnection,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSet(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSetAsync(System.Data.Common.DbCommand,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSetAsync(System.Data.Common.DbCommand,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSetAsync(System.Data.Common.DbConnection,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveDataSetAsync(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the <see cref="T:System.Data.DataSet" /> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>A <see cref="T:System.Data.DataSet" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRow(System.Data.Common.DbCommand,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRow(System.Data.Common.DbCommand,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRow(System.Data.Common.DbConnection,System.Int32,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRow(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRowAsync(System.Data.Common.DbCommand,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRowAsync(System.Data.Common.DbCommand,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbCommand" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRowAsync(System.Data.Common.DbConnection,System.Int32,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.RetrieveRowAsync(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Executes the SQL statement using <see cref="T:System.Data.Common.DbConnection" />, and returns the first <see cref="T:System.Data.DataRow" /> in the result set.
            </summary>
      <param name="connection">The <see cref="T:System.Data.Common.DbConnection" /> to use for executing the SQL statement.</param>
      <param name="sql">The SQL statement to be executed.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">The parameter values to be used to fill in <see cref="T:System.Data.Common.DbParameter" /> parameters identified by '@' prefix in <paramref name="sql" /> expression.</param>
      <returns>The first <see cref="T:System.Data.DataRow" /> in the result set.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.SQLEncode(System.String,Gemstone.Data.DatabaseType)">
      <summary>
            Performs SQL encoding on given SQL string.
            </summary>
      <param name="sql">The string on which SQL encoding is to be performed.</param>
      <param name="databaseType">Database type for the SQL encoding.</param>
      <returns>The SQL encoded string.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ToDataTable(System.String,System.String,System.Boolean)">
      <summary>
            Converts a delimited string into a <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="delimitedData">The delimited text to be converted to <see cref="T:System.Data.DataTable" />.</param>
      <param name="delimiter">The character(s) used for delimiting the text.</param>
      <param name="header">true, if the delimited text contains header information; otherwise, false.</param>
      <returns>A <see cref="T:System.Data.DataTable" /> object.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.ToDelimitedString(System.Data.DataTable,System.String,System.Boolean,System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Data.DataTable" /> to a multi-line delimited string (e.g., CSV export).
            </summary>
      <param name="table">The <see cref="T:System.Data.DataTable" /> whose data is to be converted to delimited text.</param>
      <param name="delimiter">The character(s) to be used for delimiting the text.</param>
      <param name="quoted">true, if text is to be surrounded by quotes; otherwise, false.</param>
      <param name="header">true, if the delimited text should have header information.</param>
      <returns>A string of delimited text.</returns>
    </member>
    <member name="M:Gemstone.Data.DataExtensions.DataExtensions.UpdateData(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String)">
      <summary>
            Updates the underlying data of the <see cref="T:System.Data.DataTable" /> using <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />, and
            returns the number of rows successfully updated.
            </summary>
      <param name="sourceData">The <see cref="T:System.Data.DataTable" /> used to update the underlying data source.</param>
      <param name="sourceSql">The SQL statement used initially to populate the <see cref="T:System.Data.DataTable" />.</param>
      <param name="connection">The <see cref="T:Microsoft.Data.SqlClient.SqlConnection" /> to use for updating the underlying data source.</param>
      <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataTable" />.</returns>
    </member>
    <member name="T:Gemstone.Data.DataSetExtensions.DataSetExtensions">
      <summary>
            Defines extension functions related to <see cref="T:System.Data.DataSet" /> instances.
            </summary>
    </member>
    <member name="M:Gemstone.Data.DataSetExtensions.DataSetExtensions.DeriveColumnType(Gemstone.Data.DataSetExtensions.DataType)">
      <summary>
            Gets column object <see cref="T:System.Type" /> from given <see cref="T:Gemstone.Data.DataSetExtensions.DataType" />.
            </summary>
      <param name="dataType">
        <see cref="T:Gemstone.Data.DataSetExtensions.DataType" /> to derive object <see cref="T:System.Type" /> from.</param>
      <returns>Object <see cref="T:System.Type" /> derived from given <see cref="T:Gemstone.Data.DataSetExtensions.DataType" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataSetExtensions.DataSetExtensions.DeserializeToDataSet(System.IO.Stream)">
      <summary>
            Deserializes a <see cref="T:System.Data.DataSet" /> from a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="source">
        <see cref="T:System.IO.Stream" /> to deserialize <see cref="T:System.Data.DataSet" /> from.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.DataSetExtensions.DataSetExtensions.DeserializeToDataSet(System.IO.Stream)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Data.DataSetExtensions.DataSetExtensions.GetDataType(System.Type,System.Boolean)">
      <summary>
            Attempts to derive <see cref="T:Gemstone.Data.DataSetExtensions.DataType" /> based on object <see cref="T:System.Type" />.
            </summary>
      <param name="objectType">
        <see cref="T:System.Type" /> of object to test.</param>
      <param name="assumeStringForUnknownTypes">Flag to determine if unknown column types should be serialized as strings.</param>
      <returns>Derived <see cref="T:Gemstone.Data.DataSetExtensions.DataType" /> based on object <see cref="T:System.Type" /> if matched; otherwise <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Object" />.</returns>
    </member>
    <member name="M:Gemstone.Data.DataSetExtensions.DataSetExtensions.SerializeToStream(System.Data.DataSet,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Serializes a <see cref="T:System.Data.DataSet" /> to a destination <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="source">
        <see cref="T:System.Data.DataSet" /> to serialize.</param>
      <param name="destination">
        <see cref="T:System.IO.Stream" /> to serialize <see cref="T:System.Data.DataSet" /> on.</param>
      <param name="assumeStringForUnknownTypes">Flag to determine if unknown column types should be serialized as strings.</param>
      <param name="useNullableDataTypes">Flag to determine if extra information should be serialized to support null values.</param>
    </member>
    <member name="T:Gemstone.Data.DataSetExtensions.DataType">
      <summary>
            Data types available to a <see cref="T:System.Data.DataSet" /> object.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Boolean">
      <summary>
            Boolean data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Boolean" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Byte">
      <summary>
            Unsigned 8-bit byte data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Byte" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Char">
      <summary>
            16-bit character data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Char" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.DateTime">
      <summary>
            Date/time data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.DateTime" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Decimal">
      <summary>
            Decimal data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Decimal" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Double">
      <summary>
            64-bit double precision floating point numeric data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Double" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Guid">
      <summary>
            Unsigned 128-bit Guid integer data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Guid" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Int16">
      <summary>
            Signed 16-bit integer data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Int16" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Int32">
      <summary>
            Signed 32-bit integer data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Int32" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Int64">
      <summary>
            Signed 64-bit integer data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Int64" /></summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.SByte">
      <summary>
            Signed byte data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.SByte" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Single">
      <summary>
            32-bit single precision floating point numeric data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.Single" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.String">
      <summary>
            Character array data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.String" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.TimeSpan">
      <summary>
            Time-span data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.TimeSpan" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.UInt16">
      <summary>
            Unsigned 16-bit integer data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.UInt16" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.UInt32">
      <summary>
            Unsigned 32-bit integer data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.UInt32" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.UInt64">
      <summary>
            Unsigned 64-bit integer data type, <see cref="F:Gemstone.Data.DataSetExtensions.DataType.UInt64" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Blob">
      <summary>
            Unsigned byte array data type.
            </summary>
    </member>
    <member name="F:Gemstone.Data.DataSetExtensions.DataType.Object">
      <summary>
            User defined/other data type.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.AffixPosition">
      <summary>
            Locations for target expression amendment application.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.AffixPosition.Prefix">
      <summary>
            Apply amendment to beginning of <see cref="T:Gemstone.Data.Model.TargetExpression" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.AffixPosition.Suffix">
      <summary>
            Apply amendment to ending of <see cref="T:Gemstone.Data.Model.TargetExpression" />.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.AmendExpressionAttribute">
      <summary>
            Defines an attribute that will request amendment of a table name or field list with the specified text.
            </summary>
      <remarks>
        <para>
            As an example, this can be used to add table hints, e.g., <c>WITH (NOLOCK)</c>, for select statements in
            SQL Server.
            </para>
        <para>
            Applying the <see cref="T:Gemstone.Data.Model.AmendExpressionAttribute" /> to a modeled table with no specified database type parameter
            will be meant to infer that the amendment be used for all database types. Using a specific database type as a
            parameter to the attribute, e.g., <c>[AmendExpression("WITH (NOLOCK)", DatabaseType.SQLServer)]</c>, means the
            amendment text will only be applied to the specific database - however, the attribute allows multiple instances
            on the same identifier so you could specify that amendment application only be applied to two databases:
            <code>
            [AmendExpression("AS T1", DatabaseType.SQLServer), AmendExpression("AS T1", DatabaseType.MySQL)]
            </code>
            Other parameters exist to fully customize target expression, set affix position and specify statement types:
            <code>
            [AmendExpression("TOP 200",
                TargetExpression = TargetExpression.FieldList,
                AffixPosition = AffixPosition.Prefix,
                StatementTypes = StatementTypes.SelectSet)]
            </code></para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.AmendExpressionAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.AmendExpressionAttribute" /> that will request application of <paramref name="amendmentText" />
            for any database.
            </summary>
      <param name="amendmentText">Amendment text to apply.</param>
    </member>
    <member name="M:Gemstone.Data.Model.AmendExpressionAttribute.#ctor(System.String,Gemstone.Data.DatabaseType)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.AmendExpressionAttribute" /> that will request application of <paramref name="amendmentText" />
            for the specified <paramref name="targetDatabaseType" />.
            </summary>
      <param name="amendmentText">Amendment text to apply.</param>
      <param name="targetDatabaseType">Target <see cref="T:Gemstone.Data.DatabaseType" /> for amendment text.</param>
    </member>
    <member name="P:Gemstone.Data.Model.AmendExpressionAttribute.AffixPosition">
      <summary>
            Gets or sets location for amendment application; defaults to <see cref="F:Gemstone.Data.Model.AffixPosition.Suffix" />.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.AmendExpressionAttribute.AmendmentText">
      <summary>
            Gets or sets amendment text to be applied.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.AmendExpressionAttribute.StatementTypes">
      <summary>
            Gets or sets statement types for amendment application; defaults to <see cref="F:Gemstone.Data.Model.StatementTypes.Select" />.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.AmendExpressionAttribute.TargetDatabaseType">
      <summary>
            Gets target <see cref="T:Gemstone.Data.DatabaseType" /> for amendment application.
            </summary>
      <remarks>
            When value is <c>null</c>, amendment text will be applied to all database types.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.AmendExpressionAttribute.TargetExpression">
      <summary>
            Gets or sets target expression for amendment application; defaults to <see cref="F:Gemstone.Data.Model.TargetExpression.TableName" />.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.DefaultSortOrderAttribute">
      <summary>
            Defines an attribute that will allow a default sort field in the model
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.DefaultSortOrderAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.DefaultSortOrderAttribute" />.
            </summary>
      <param name="ascending">Direction of sort</param>
    </member>
    <member name="P:Gemstone.Data.Model.DefaultSortOrderAttribute.Ascending">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.DeleteRolesAttribute">
      <summary>
            Defines an attribute that will allow setting DELETE function roles for a modeled table.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.DeleteRolesAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.DeleteRolesAttribute" />.
            </summary>
      <param name="roles">Comma separated string of roles allowed for DELETE functions.</param>
    </member>
    <member name="P:Gemstone.Data.Model.DeleteRolesAttribute.Roles">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.EncryptDataAttribute">
      <summary>
            Defines an attribute that provides encryption of text field contents for a modeled table.
            </summary>
      <remarks>
            Application of attribute is only valid on <see cref="T:System.String" /> properties; attribute will be
            ignored if applied to properties of other types.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.EncryptDataAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.EncryptDataAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> with a specified <paramref name="keyReference" /> value.
            </summary>
      <param name="keyReference">Reference name used to lookup encryption key and initialization vector.</param>
    </member>
    <member name="F:Gemstone.Data.Model.EncryptDataAttribute.DefaultKeyReference">
      <summary>
            Default key reference value.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.EncryptDataAttribute.KeyReference">
      <summary>
            Gets reference name used to lookup encryption key and initialization vector;
            new keys will be created for reference if it does not exist.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.FieldDataTypeAttribute">
      <summary>
            Defines an attribute that will request use of a specific data type on a modeled table field.
            Typically only needed to enforce use of a specific <see cref="T:System.Data.DbType" /> for parameters.
            </summary>
      <remarks>
            Applying this attribute to a modeled table field with no database type parameter will specify that
            the field data type be used for all database types. Using a specific database type as a parameter
            to the attribute, e.g., [FieldDataType(DbType.DateTime2, DatabaseType.SQLServer)], means the field
            data type will only be applied to the specific database - however, the attribute allows multiple
            instances on the same identifier so you could specify different field data types for different
            database types. When multiple instances of the attribute are applied to the same identifier, the
            first attribute encountered that does not target a specific database will be considered the default
            value for all non-specified database types.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.FieldDataTypeAttribute.#ctor(System.Data.DbType)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" /> that will request use of specific <see cref="T:System.Data.DbType" />.
            </summary>
      <param name="fieldDataType">Specific <see cref="T:System.Data.DbType" /> to target for field.</param>
    </member>
    <member name="M:Gemstone.Data.Model.FieldDataTypeAttribute.#ctor(System.Data.DbType,Gemstone.Data.DatabaseType)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" /> that will request use of specific <see cref="T:System.Data.DbType" />
            for the specified <see cref="T:Gemstone.Data.DatabaseType" />.
            </summary>
      <param name="fieldDataType">Specific <see cref="T:System.Data.DbType" /> to target for field.</param>
      <param name="targetDatabaseType">Target <see cref="T:Gemstone.Data.DatabaseType" /> for applying <paramref name="fieldDataType" />.</param>
    </member>
    <member name="P:Gemstone.Data.Model.FieldDataTypeAttribute.FieldDataType">
      <summary>
            Gets field data type that determines which <see cref="T:System.Data.DbType" /> should be used when using
            database command operations.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.FieldDataTypeAttribute.TargetDatabaseType">
      <summary>
            Gets target <see cref="T:Gemstone.Data.DatabaseType" /> for this <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />.
            </summary>
      <remarks>
            When value is <c>null</c>, specified <see cref="P:Gemstone.Data.Model.FieldDataTypeAttribute.FieldDataType" /> will be applied to all database types.
            </remarks>
    </member>
    <member name="T:Gemstone.Data.Model.FieldNameAttribute">
      <summary>
            Defines an attribute that will allow a custom field name for a modeled table instead of using
            the property name.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.FieldNameAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.FieldNameAttribute" />.
            </summary>
      <param name="fieldName">Field name to use for property.</param>
    </member>
    <member name="P:Gemstone.Data.Model.FieldNameAttribute.FieldName">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.GetRolesAttribute">
      <summary>
            Defines an attribute that will allow setting GET function roles for a modeled table.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.GetRolesAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.GetRolesAttribute" />.
            </summary>
      <param name="roles">Comma separated string of roles allowed for GET functions.</param>
    </member>
    <member name="P:Gemstone.Data.Model.GetRolesAttribute.Roles">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.IRecordFilter">
      <summary>
            Defines an interface for a filter that can be applied to queries.
            </summary>
      <remarks>
            For backend restrictions <see cref="T:Gemstone.Data.Model.RecordRestriction" /> should be used. This interface
            is intended to be used for user initiated searches and filters from a UI.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.IRecordFilter.FieldName">
      <summary>
            Gets or sets the name of the field to be searched.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.IRecordFilter.GenerateRestriction(Gemstone.Data.Model.ITableOperations)">
      <summary>
            Generates a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> that corresponds to this <see cref="T:Gemstone.Data.Model.IRecordFilter" />.
            </summary>
      <param name="tableOperations">The <see cref="T:Gemstone.Data.Model.ITableOperations" /> that will be used to generate the restriction.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Model.IRecordFilter.GenerateRestriction(Gemstone.Data.Model.ITableOperations)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.Model.IRecordFilter.ModelProperty">
      <summary>
            The <see cref="T:System.Reflection.PropertyInfo" /> of the model that this <see cref="T:Gemstone.Data.Model.IRecordFilter" /> applies to.
            </summary>
      <remarks>
            This will return <c>null</c> if the <see cref="T:Gemstone.Data.Model.IRecordFilter" /> is not associated with a property.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.IRecordFilter.Operator">
      <summary>
            Gets or sets the operator to be used for the search.
            </summary>
      <remarks>
        <para>
            The list of supported operators includes:
            <list type="bullet"><item>=</item><item>&lt;&gt;</item><item>&lt;</item><item>&gt;</item><item>IN</item><item>NOT IN</item><item>LIKE</item><item>NOT LIKE</item><item>&lt;=</item><item>&gt;=</item></list></para>
      </remarks>
      <exception cref="T:System.NotSupportedException">Attempted to assign an operator that is not supported.</exception>
    </member>
    <member name="P:Gemstone.Data.Model.IRecordFilter.SearchParameter">
      <summary>
            Gets or sets the value to be searched.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.IRecordFilter.SupportsEncrypted">
      <summary>
            Indicates whether this <see cref="T:Gemstone.Data.Model.IRecordFilter" /> will work on encrypted fields.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.ITableOperations">
      <summary>
            Defines a common interface for implementations of <see cref="T:Gemstone.Data.Model.TableOperations`1" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.AddNewOrUpdateRecord(System.Object)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database if the
            record has not defined any of its primary key values; otherwise, the database will
            be updated with the specified modeled table <paramref name="record" />.
            </summary>
      <param name="record">Record to add or update.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.AddNewOrUpdateRecordAsync(System.Object,System.Threading.CancellationToken)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database if the
            record has not defined any of its primary key values; otherwise, the database will
            be updated with the specified modeled table <paramref name="record" />.
            </summary>
      <param name="record">Record to add or update.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.AddNewRecord(System.Data.DataRow)">
      <summary>
            Adds the specified <paramref name="row" /> to the database.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be added.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.AddNewRecord(System.Object)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database.
            </summary>
      <param name="record">Record to add.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.AddNewRecordAsync(System.Data.DataRow,System.Threading.CancellationToken)">
      <summary>
            Adds the specified <paramref name="row" /> to the database.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be added.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.AddNewRecordAsync(System.Object,System.Threading.CancellationToken)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database.
            </summary>
      <param name="record">Record to add.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.ApplyRecordDefaults(System.Object)">
      <summary>
            Applies the default values on the specified modeled table <paramref name="record" />
            where any of the properties are marked with either <see cref="T:System.ComponentModel.DefaultValueAttribute" />
            or <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />.
            </summary>
      <param name="record">Record to update.</param>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.ApplyRecordUpdates(System.Object)">
      <summary>
            Applies the update values on the specified modeled table <paramref name="record" /> where
            any of the properties are marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" />.
            </summary>
      <param name="record">Record to update.</param>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToDeletes">
      <summary>
            Gets or sets flag that determines if <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied to delete operations.
            </summary>
      <remarks>
        <para>
            If <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> only references primary key fields, then this property value should be set
            to <c>false</c> since default delete operations for a modeled record already work against primary key fields.
            </para>
        <para>
            This flag can be manually set per <see cref="T:Gemstone.Data.Model.TableOperations`1" /> instance or handled automatically by marking
            a model with the <see cref="T:Gemstone.Data.Model.RootQueryRestrictionAttribute" /> and assigning a value to the attribute property
            <see cref="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.ApplyToDeletes" />.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToUpdates">
      <summary>
            Gets or sets flag that determines if <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied to update operations.
            </summary>
      <remarks>
        <para>
            If <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> only references primary key fields, then this property value should be set
            to <c>false</c> since default update operations for a modeled record already work against primary key fields.
            </para>
        <para>
            This flag can be manually set per <see cref="T:Gemstone.Data.Model.TableOperations`1" /> instance or handled automatically by marking
            a model with the <see cref="T:Gemstone.Data.Model.RootQueryRestrictionAttribute" /> and assigning a value to the attribute property
            <see cref="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.ApplyToUpdates" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache">
      <summary>
            Clears the primary key cache for this <see cref="T:Gemstone.Data.Model.ITableOperations" /> instance.
            </summary>
      <remarks>
        <para>
            This method is intended to be used in conjunction with calls to the overloads for
            <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])" /> which are
            used for record pagination.
            </para>
        <para>
            If record set is known to have changed outside purview of this class, this method
            should be called so that primary key cache can be reloaded.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.Connection">
      <summary>
            Gets <see cref="T:Gemstone.Data.AdoDataConnection" /> instance associated with this <see cref="T:Gemstone.Data.Model.TableOperations`1" /> used for database operations.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})">
      <summary>
            Deletes the records referenced by the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToDeletes" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="restriction" /> cannot be <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(System.Data.DataRow)">
      <summary>
            Deletes the record referenced by the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be deleted.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(System.Object)">
      <summary>
            Deletes the specified modeled table <paramref name="record" /> from the database.
            </summary>
      <param name="record">Record to delete.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(System.Object[])">
      <summary>
            Deletes the record referenced by the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecordAsync(Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
      <summary>
            Deletes the records referenced by the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToDeletes" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="restriction" /> cannot be <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecordAsync(System.Data.DataRow,System.Threading.CancellationToken)">
      <summary>
            Deletes the record referenced by the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be deleted.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecordAsync(System.Object,System.Threading.CancellationToken)">
      <summary>
            Deletes the specified modeled table <paramref name="record" /> from the database.
            </summary>
      <param name="record">Record to delete.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecordAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>
            Deletes the record referenced by the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecordWhere(System.String,System.Object[])">
      <summary>
            Deletes the records referenced by the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.DeleteRecordWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Deletes the records referenced by the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.ExceptionHandler">
      <summary>
            Gets or sets delegate used to handle table operation exceptions.
            </summary>
      <remarks>
            When exception handler is provided, table operations will not throw exceptions for database calls, any
            encountered exceptions will be passed to handler for processing. Otherwise, exceptions will be thrown
            on the call stack.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.FieldHasAttribute``1(System.String)">
      <summary>
            Determines if the specified field has an associated attribute.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <typeparam name="TAttribute">Type of attribute to search for.</typeparam>
      <returns>
        <c>true</c> if field has attribute; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.FieldHasAttribute(System.String,System.Type)">
      <summary>
            Determines if the specified field has an associated attribute.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <param name="attributeType">Type of attribute to search for.</param>
      <returns>
        <c>true</c> if field has attribute; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not an <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetFieldNames(System.Boolean)">
      <summary>
            Gets the field names for the table; if <paramref name="escaped" /> is <c>true</c>, also includes any escaping as defined in model.
            </summary>
      <param name="escaped">Flag that determines if field names should include any escaping as defined in the model; defaults to <c>true</c>.</param>
      <returns>Array of field names.</returns>
      <remarks>
            A field name will only be escaped if the model requested escaping with the <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetFieldType(System.String)">
      <summary>
            Gets the <see cref="T:System.Type" /> for the specified field.
            </summary>
      <param name="fieldName">Field name to retrieve.</param>
      <returns>Field <see cref="T:System.Type" /> or <c>null</c> if field is not found.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetFieldValue(System.Object,System.String)">
      <summary>
            Gets the value for the specified field.
            </summary>
      <param name="record">Modeled table record.</param>
      <param name="fieldName">Field name to retrieve.</param>
      <returns>Field value or <c>null</c> if field is not found.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)">
      <summary>
            Gets the interpreted value for the specified field, encrypting or returning any intermediate <see cref="T:System.Data.IDbDataParameter" />
            value as needed.
            </summary>
      <param name="fieldName">Field name to retrieve.</param>
      <param name="value">Field value to use.</param>
      <returns>
            Interpreted value for the specified field, encrypting or returning any intermediate <see cref="T:System.Data.IDbDataParameter" /> value
            as needed.
            </returns>
      <remarks>
        <para>
            This function will need to be used when calling overloads that take a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> or composite format
            filter expression where the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" /> have been modeled
            on a field referenced by one of the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameters. Since the record restrictions are used
            with a free-form expression, the <see cref="T:Gemstone.Data.Model.TableOperations`1" /> class cannot be aware of the fields accessed in the
            expression without attempting to parse the expression which would be time-consuming and error-prone; as a result, users
            will need to be aware to call this function when using record restriction that references fields that are either marked
            for encryption or use a specific field data-type attribute.
            </para>
        <para>
            If a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter references a field that is modeled with an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            this function will need to be called, replacing the restriction parameter with the returned value, so that the field data
            value will be properly encrypted prior to executing the database function.
            </para>
        <para>
            If a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter references a field that is modeled with a <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />,
            this function will need to be called, replacing the restriction parameter with the returned value, so that the field data
            type will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetPageOfRecords(System.Object[],System.Int32,System.Int32)">
      <summary>
            Gets the specified <paramref name="page" /> of records from the provided source <paramref name="records" /> array.
            </summary>
      <param name="records">Source records array.</param>
      <param name="page">Desired page of records.</param>
      <param name="pageSize">Desired page size.</param>
      <returns>A page of records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetPageOfRecordsAsync(System.Collections.Generic.IAsyncEnumerable{System.Object},System.Int32,System.Int32)">
      <summary>
            Gets the specified <paramref name="page" /> of records from the provided source <paramref name="records" /> array.
            </summary>
      <param name="records">Source records array.</param>
      <param name="page">Desired page of records.</param>
      <param name="pageSize">Desired page size.</param>
      <returns>A page of records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetPrimaryKeyCacheSize">
      <summary>
            Calculates the size of the current primary key cache, in number of records.
            </summary>
      <returns>Number of records in the current primary key cache.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetPrimaryKeyFieldNames(System.Boolean)">
      <summary>
            Get the primary key field names for the table; if <paramref name="escaped" /> is <c>true</c>, also includes any escaping as defined in model.
            </summary>
      <param name="escaped">Flag that determines if field names should include any escaping as defined in the model; defaults to <c>true</c>.</param>
      <returns>Array of primary key field names.</returns>
      <remarks>
            A field name will only be escaped if the model requested escaping with the <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetPrimaryKeys(System.Data.DataRow)">
      <summary>
            Gets the primary key values from the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data.</param>
      <returns>Primary key values from the specified <paramref name="row" />.</returns>
      <remarks>
            Function returns raw data from <paramref name="row" /> without interpretation, it may be
            necessary to call <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> for models with primary key
            fields that are marked with either <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or
            <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetPrimaryKeys(System.Object)">
      <summary>
            Gets the primary key values from the specified <paramref name="record" />.
            </summary>
      <param name="record">Record of data to retrieve primary keys from.</param>
      <returns>Primary key values from the specified <paramref name="record" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Generates a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> based on <paramref name="recordFilters" />.
            </summary>
      <param name="recordFilters">
        <see cref="T:Gemstone.Data.Model.IRecordFilter" /> to search.</param>
      <returns>
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> based on fields marked with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />, Property Names and specified <paramref name="recordFilters" />.
            </returns>
      <remarks>
            Any fields marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> will be automatically managed, i.e.,
            the returned <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameters will already apply any field based encryption as needed. Database query functions
            executed for fields marked for encryption will only be searched using = and =/= , regardless of any otherwise
            specified value in the <see cref="T:Gemstone.Data.Model.IRecordFilter" /> as encryption is handled locally. However, the <see cref="M:Gemstone.Data.Model.ITableOperations.SearchRecords(System.String,System.Boolean,System.StringComparison,Gemstone.Data.Model.IRecordFilter[])" /> function
            can be used to find data in encrypted fields that are marked for search with other limits.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.HasPrimaryKeyIdentityField">
      <summary>
            Gets flag that determines if modeled table has a primary key that is an identity field.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.LoadRecord(System.Data.DataRow)">
      <summary>
            Creates a new modeled table record queried from the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be loaded.</param>
      <returns>New modeled table record queried from the specified <paramref name="row" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.LoadRecord(System.Object[])">
      <summary>
            Creates a new modeled table record queried from the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>New modeled table record queried from the specified <paramref name="primaryKeys" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.LoadRecordAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>
            Creates a new modeled table record queried from the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>New modeled table record queried from the specified <paramref name="primaryKeys" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.NewRecord">
      <summary>
            Creates a new modeled record instance, applying any modeled default values as specified by a
            <see cref="T:System.ComponentModel.DefaultValueAttribute" /> or <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" /> on the
            model properties.
            </summary>
      <returns>New modeled record instance with any defined default values applied.</returns>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.PrimaryKeyCache">
      <summary>
            Gets or sets primary key cache.
            </summary>
      <remarks>
        <para>
            The <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])" /> overloads that include paging parameters
            cache the sorted and filtered primary keys of queried records between calls so that paging is fast and
            efficient. Since the primary keys are cached, an instance of the <see cref="T:Gemstone.Data.Model.TableOperations`1" /> should
            exist per user session when using query functions that support pagination. In web based implementations,
            the primary cache should be stored with user session state data and then restored between instances of
            the <see cref="T:Gemstone.Data.Model.TableOperations`1" /> that are created along with a connection that is opened per page.
            </para>
        <para>
            The function <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> should be called to manually clear cache when table
            contents are known to have changed. Note that calls to any <see cref="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(System.Object)" /> overload
            will automatically clear any existing primary key cache.
            </para>
        <para>
            Primary keys values are stored in data table without interpretation, i.e., in their raw form as queried
            from the database. Primary key data in cache will be encrypted for models with primary key fields that
            are marked with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /></para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecord(Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecord(System.String,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />,
            execution of query will apply <paramref name="orderByExpression" />.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordAsync(Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordAsync(System.String,Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />,
            execution of query will apply <paramref name="orderByExpression" />.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount">
      <summary>
            Gets total record count for the modeled table.
            </summary>
      <returns>
            Total record count for the modeled table.
            </returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Gets the record count for the modeled table based on search parameter.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="recordFilter">
        <see cref="T:Gemstone.Data.Model.IRecordFilter" /> to be filtered by</param>
      <returns>Record count for the modeled table based on search parameter.</returns>
      <remarks>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.ITableOperations.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /></remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Gets the record count for the specified <paramref name="restrictions" /> - or - total record
            count for the modeled table if <paramref name="restrictions" /> is <c>null</c>.
            </summary>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>
            Record count for the specified <paramref name="restrictions" /> - or - total record count
            for the modeled table if no <see cref="T:Gemstone.Data.Model.RecordRestriction" /> is provided.
            </returns>
      <remarks>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCountAsync(System.Threading.CancellationToken)">
      <summary>
            Gets total record count for the modeled table.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>
            Total record count for the modeled table.
            </returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCountAsync(System.Threading.CancellationToken,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Gets the record count for the modeled table based on search parameter.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="recordFilter">
        <see cref="T:Gemstone.Data.Model.IRecordFilter" /> to be filtered by</param>
      <returns>Record count for the modeled table based on search parameter.</returns>
      <remarks>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.ITableOperations.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /></remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCountAsync(System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Gets the record count for the specified <paramref name="restrictions" /> - or - total record
            count for the modeled table if <paramref name="restrictions" /> is <c>null</c>.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>
            Record count for the specified <paramref name="restrictions" /> - or - total record count
            for the modeled table if no <see cref="T:Gemstone.Data.Model.RecordRestriction" /> is provided.
            </returns>
      <remarks>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCountWhere(System.String,System.Object[])">
      <summary>
            Gets the record count for the modeled table for the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Record count for the modeled table for the specified parameters.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordCountWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Gets the record count for the modeled table for the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Record count for the modeled table for the specified parameters.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecords(Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Queries database and returns modeled table records for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)">
      <summary>
            Queries database and returns modeled table records for the specified parameters.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="limit">Limit of number of record to return.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            If no record <paramref name="restriction" /> or <paramref name="limit" /> is provided, all rows will be returned.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting, paging and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.ITableOperations.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /> using <paramref name="recordFilters" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordsAsync(Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns modeled table records for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordsAsync(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns modeled table records for the specified parameters.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="limit">Limit of number of record to return.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            If no record <paramref name="restriction" /> or <paramref name="limit" /> is provided, all rows will be returned.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordsAsync(System.String,System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordsAsync(System.String,System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting, paging and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.ITableOperations.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /> using <paramref name="recordFilters" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordsAsync(System.String,System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordsWhere(System.String,System.Object[])">
      <summary>
            Queries database and returns modeled table records for the specified SQL filter expression
            and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordsWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Queries database and returns modeled table records for the specified SQL filter expression
            and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordWhere(System.String,System.Object[])">
      <summary>
            Queries database and returns a single modeled table record for the specified SQL filter
            expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified filter expression and parameters, <c>null</c> will be returned.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.QueryRecordWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Queries database and returns a single modeled table record for the specified SQL filter
            expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified filter expression and parameters, <c>null</c> will be returned.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction">
      <summary>
            Gets or sets root record restriction that applies to query table operations.
            </summary>
      <remarks>
        <para>
            Defining a root query restriction creates a base query filter that gets applied to all query operations,
            even when another restriction is applied - in this case the root restriction will be pre-pended to the
            specified query, e.g.:
            <code>
            restriction = RootQueryRestriction + restriction;
            </code>
            A root query restriction is useful to apply a common state to the query operations, e.g., always
            filtering records for a specific user or context.
            </para>
        <para>
            A root query restriction can be manually assigned to a <see cref="T:Gemstone.Data.Model.TableOperations`1" /> instance or
            automatically assigned by marking a model with the <see cref="T:Gemstone.Data.Model.RootQueryRestrictionAttribute" />.
            </para>
        <para>
            If any of the <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.SearchRecords(System.String,System.Boolean,System.StringComparison,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Locally searches retrieved table records after queried from database for the specified sorting and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            Function only typically used for record models that apply the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="comparison">
        <see cref="T:System.StringComparison" /> to use when searching string fields; defaults to ordinal ignore case.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An array of modeled table row instances for the queried records that match the search.</returns>
      <remarks>
        <para>
            This function searches records locally after query from database, this way Search functionality will work
            even with fields that are modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> and use restrictions not being = or =/=.
            Primary keys for this function will not be cached server-side and this function will be slower and more expensive than similar calls
            to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])" />. Usage should be restricted to cases searching for field data that has
            been modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </para>
        <para>
            This function does not paginate records, instead a full list of search records is returned. User can cache returned records and page
            through them using the <see cref="M:Gemstone.Data.Model.ITableOperations.GetPageOfRecords(System.Object[],System.Int32,System.Int32)" /> function. As a result, usage should be restricted to smaller data sets. 
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.SearchRecordsAsync(System.String,System.Boolean,System.Threading.CancellationToken,System.StringComparison,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Locally searches retrieved table records after queried from database for the specified sorting and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            Function only typically used for record models that apply the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="comparison">
        <see cref="T:System.StringComparison" /> to use when searching string fields; defaults to ordinal ignore case.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An array of modeled table row instances for the queried records that match the search.</returns>
      <remarks>
        <para>
            This function searches records locally after query from database, this way Search functionality will work
            even with fields that are modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> and use restrictions not being = or =/=.
            Primary keys for this function will not be cached server-side and this function will be slower and more expensive than similar calls
            to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])" />. Usage should be restricted to cases searching for field data that has
            been modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </para>
        <para>
            This function does not paginate records, instead a full list of search records is returned. User can cache returned records and page
            through them using the <see cref="M:Gemstone.Data.Model.ITableOperations.GetPageOfRecordsAsync(System.Collections.Generic.IAsyncEnumerable{System.Object},System.Int32,System.Int32)" /> function. As a result, usage should be restricted to smaller data sets. 
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.TableName">
      <summary>
            Gets the table name defined for the modeled table, includes any escaping as defined in model.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.ToDataTable(System.Collections.IEnumerable)">
      <summary>
            Converts the given collection of <paramref name="records" /> into a <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="records">The collection of records to be inserted into the data table.</param>
      <returns>A data table containing data from the given records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.ToDataTableAsync(System.Collections.Generic.IAsyncEnumerable{System.Object},System.Threading.CancellationToken)">
      <summary>
            Converts the given collection of <paramref name="records" /> into a <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="records">The collection of records to be inserted into the data table.</param>
      <returns>A data table containing data from the given records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.TryGetFieldAttribute(System.String,System.Type,System.Attribute@)">
      <summary>
            Attempts to get the specified <paramref name="attributeType" /> for a field.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <param name="attributeType">Type of attribute to attempt to get.</param>
      <param name="attribute">Attribute that was found, if any.</param>
      <returns>
        <c>true</c> if attribute was found; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not an <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.TryGetFieldAttribute``1(System.String,``0@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> for a field.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <param name="attribute">Attribute that was found, if any.</param>
      <typeparam name="TAttribute">Type of attribute to attempt to get.</typeparam>
      <returns>
        <c>true</c> if attribute was found; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.UnescapedTableName">
      <summary>
            Gets the table name defined for the modeled table without any escape characters.
            </summary>
      <remarks>
            A table name will only be escaped if the model requested escaping with the <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Data.DataRow,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Updates the database with the specified <paramref name="row" />, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Object,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />,
            any model properties marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will
            be evaluated and applied before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToUpdates" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecordAsync(System.Data.DataRow,System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Updates the database with the specified <paramref name="row" />, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecordAsync(System.Object,System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />,
            any model properties marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will
            be evaluated and applied before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToUpdates" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecordWhere(System.Data.DataRow,System.String,System.Object[])">
      <summary>
            Updates the database with the specified <paramref name="row" /> referenced by the
            specified SQL filter expression and parameters, any model properties marked with
            <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied before
            the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Data.DataRow,Gemstone.Data.Model.RecordRestriction)" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecordWhere(System.Object,System.String,System.Object[])">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />
            referenced by the specified SQL filter expression and parameters, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Object,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecordWhereAsync(System.Data.DataRow,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Updates the database with the specified <paramref name="row" /> referenced by the
            specified SQL filter expression and parameters, any model properties marked with
            <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied before
            the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Data.DataRow,Gemstone.Data.Model.RecordRestriction)" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.ITableOperations.UpdateRecordWhereAsync(System.Object,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />
            referenced by the specified SQL filter expression and parameters, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Object,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.ITableOperations.UseCaseSensitiveFieldNames">
      <summary>
            Gets or sets flag that determines if field names should be treated as case-sensitive. Defaults to <c>false</c>.
            </summary>
      <remarks>
            In cases where modeled table fields have applied <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />, this flag will be used
            to properly update escaped field names that may be case-sensitive. For example, escaped field names in Oracle
            are case-sensitive. This value is typically <c>false</c>.
            </remarks>
    </member>
    <member name="T:Gemstone.Data.Model.NonRecordFieldAttribute">
      <summary>
            Defines an attribute that will mark a property to not be serialized as a record field.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.NonRecordFieldAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Data.Model.NonRecordFieldAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Gemstone.Data.Model.PageSizeAttribute">
      <summary>
            Defines an attribute that will allows a top number of results to be returned when queried
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.PageSizeAttribute.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.PageSizeAttribute" />.
            </summary>
      <param name="limit">Number of top records to return per Page.</param>
    </member>
    <member name="P:Gemstone.Data.Model.PageSizeAttribute.Limit">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.ParentKeyAttribute">
      <summary>
            Defines an attribute that will allow a foreign key in the model to point back to parent table 
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.ParentKeyAttribute.#ctor(System.Type)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.ParentKeyAttribute" />.
            </summary>
      <param name="model">Type of modeled table that key points back to.</param>
    </member>
    <member name="P:Gemstone.Data.Model.ParentKeyAttribute.Model">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.PatchRolesAttribute">
      <summary>
            Defines an attribute that will allow setting PATCH function roles for a modeled table.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.PatchRolesAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.PatchRolesAttribute" />.
            </summary>
      <param name="roles">Comma separated string of roles allowed for PATCH functions.</param>
    </member>
    <member name="P:Gemstone.Data.Model.PatchRolesAttribute.Roles">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.PostRolesAttribute">
      <summary>
            Defines an attribute that will allow setting POST function roles for a modeled table.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.PostRolesAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.PostRolesAttribute" />.
            </summary>
      <param name="roles">Comma separated string of roles allowed for POST functions.</param>
    </member>
    <member name="P:Gemstone.Data.Model.PostRolesAttribute.Roles">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.PrimaryKeyAttribute">
      <summary>
            Defines an attribute that will mark a property as a primary key field for a modeled table.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.PrimaryKeyAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.PrimaryKeyAttribute" />.
            </summary>
      <remarks>
        <see cref="P:Gemstone.Data.Model.PrimaryKeyAttribute.IsIdentity" /> is assumed to be <c>false</c>.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.PrimaryKeyAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.PrimaryKeyAttribute" /> with specified identity state.
            </summary>
      <param name="isIdentity">Flag that determines if this primary key field is an identity field.</param>
    </member>
    <member name="P:Gemstone.Data.Model.PrimaryKeyAttribute.IsIdentity">
      <summary>
            Gets flag that determines if primary key field is an identity field.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.RecordFilter`1">
      <summary>
            Defines a filter that can be applied to queries.
            </summary>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>T:Gemstone.Data.Model.RecordFilter`1</parameter>
          </include>
        </markup>
      </typeparam>
      <remarks>
            For backend restrictions <see cref="T:Gemstone.Data.Model.RecordRestriction" /> should be used. This class
            is intended to be used for user initiated searches and filters in the user interface.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordFilter`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Data.Model.RecordFilter`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Gemstone.Data.Model.RecordFilter`1.FieldName">
      <summary>
            Gets or sets the name of the field to be searched.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.RecordFilter`1.GenerateRestriction(Gemstone.Data.Model.ITableOperations)">
      <summary>
            Generates a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> that corresponds to this <see cref="T:Gemstone.Data.Model.IRecordFilter" />.
            </summary>
      <param name="tableOperations">The <see cref="T:Gemstone.Data.Model.ITableOperations" /> that will be used to generate the restriction.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Data.Model.RecordFilter`1.GenerateRestriction(Gemstone.Data.Model.ITableOperations)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Data.Model.RecordFilter`1.ModelProperty">
      <summary>
            The <see cref="T:System.Reflection.PropertyInfo" /> of the model that this <see cref="T:Gemstone.Data.Model.IRecordFilter" /> applies to.
            </summary>
      <remarks>
            This will return <c>null</c> if the <see cref="T:Gemstone.Data.Model.IRecordFilter" /> is not associated with a property.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.RecordFilter`1.Operator">
      <summary>
            Gets or sets the operator to be used for the search.
            </summary>
      <remarks>
        <para>
            The list of supported operators includes:
            <list type="bullet"><item>=</item><item>&lt;&gt;</item><item>&lt;</item><item>&gt;</item><item>IN</item><item>NOT IN</item><item>LIKE</item><item>NOT LIKE</item><item>&lt;=</item><item>&gt;=</item></list></para>
      </remarks>
      <exception cref="T:System.NotSupportedException">Attempted to assign an operator that is not supported.</exception>
    </member>
    <member name="P:Gemstone.Data.Model.RecordFilter`1.SearchParameter">
      <summary>
            Gets or sets the value to be searched.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.RecordFilter`1.SupportsEncrypted">
      <summary>
            Indicates whether this <see cref="T:Gemstone.Data.Model.IRecordFilter" /> will work on encrypted fields.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.RecordOperation">
      <summary>
            Record operations for modeled tables.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.RecordOperation.QueryRecordCount">
      <summary>
            Operation for getting record count.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.RecordOperation.QueryRecords">
      <summary>
            Operation for retrieving paged records.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.RecordOperation.DeleteRecord">
      <summary>
            Operation for deleting records.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.RecordOperation.CreateNewRecord">
      <summary>
            Operation for creating a new record, i.e., instantiating a new modeled table record instance.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.RecordOperation.AddNewRecord">
      <summary>
            Operation for adding records.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.RecordOperation.UpdateRecord">
      <summary>
            Operation for updating records.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.RecordOperationAttribute">
      <summary>
            Defines an attribute that marks a method as a specific <see cref="T:Gemstone.Data.Model.RecordOperation" /> for a modeled table.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.RecordOperationAttribute.#ctor(System.Type,Gemstone.Data.Model.RecordOperation)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.RecordOperationAttribute" /></summary>
      <param name="modelType">The <see cref="T:System.Type" /> of modeled table.</param>
      <param name="operation">The <see cref="T:Gemstone.Data.Model.RecordOperation" /> the method represents.</param>
    </member>
    <member name="P:Gemstone.Data.Model.RecordOperationAttribute.ModelType">
      <summary>
            Gets or sets <see cref="T:System.Type" /> of modeled table.
            </summary>
    </member>
    <member name="P:Gemstone.Data.Model.RecordOperationAttribute.Operation">
      <summary>
            Gets or sets <see cref="T:Gemstone.Data.Model.RecordOperation" /> the method represents.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.RecordRestriction">
      <summary>
            Defines a parameterized record restriction that can be applied to queries.
            </summary>
      <remarks>
            For versatility, values in the <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" /> array are mutable, however, this makes the
            array vulnerable to unintended updates for long-lived instances. Consequently, the normal use-case
            of record restriction instances should be considered temporal. If an instance needs to be cached,
            consider use of the <see cref="M:Gemstone.Data.Model.RecordRestriction.Clone" /> function to reduce risk of unintended array updates.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.#ctor(System.String,System.Object[])">
      <summary>
            Creates a new parameterized <see cref="T:Gemstone.Data.Model.RecordRestriction" /> with the specified SQL filter
            expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the <paramref name="parameters" /> reference a table field that is modeled with either
            an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the
            target parameter with the returned value so that the field value will be properly set prior to
            executing any database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.Clone">
      <summary>
            Creates a deep copy of this record restriction.
            </summary>
      <returns>Deep copy of this record restriction.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.Clone(Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Creates a deep copy of the <paramref name="source" /> record restriction.
            </summary>
      <param name="source">Record restriction to clone.</param>
      <returns>Deep copy of the <paramref name="source" /> record restriction.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.CombineAnd(Gemstone.Data.Model.RecordRestriction,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Combines two record restrictions with an AND condition.
            </summary>
      <param name="left">Left operand.</param>
      <param name="right">Right operand.</param>
      <returns>New combined record restriction.</returns>
      <remarks>
            If both parameters are <c>null</c>, result will be <c>null</c>. If one parameter is <c>null</c>
            and the other parameter is not, the non-null parameter will be returned. Equally, if the
            <see cref="F:Gemstone.Data.Model.RecordRestriction.FilterExpression" /> of both parameters are <c>null</c>, empty or only whitespace,
            then the result will be <c>null</c>. If one parameter has a filter expression that is
            <c>null</c>, empty or whitespace and the other parameter's filter expression is defined, then
            the parameter that has a filter expression will be returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.CombineOr(Gemstone.Data.Model.RecordRestriction,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Combines two record restrictions with an OR condition.
            </summary>
      <param name="left">Left operand.</param>
      <param name="right">Right operand.</param>
      <returns>New combined record restriction.</returns>
      <remarks>
            If both parameters are <c>null</c>, result will be <c>null</c>. If one parameter is <c>null</c>
            and the other parameter is not, the non-null parameter will be returned. Equally, if the
            <see cref="F:Gemstone.Data.Model.RecordRestriction.FilterExpression" /> of both parameters are <c>null</c>, empty or only whitespace,
            then the result will be <c>null</c>. If one parameter has a filter expression that is
            <c>null</c>, empty or whitespace and the other parameter's filter expression is defined, then
            the parameter that has a filter expression will be returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.Equals(Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current object is equal to the <paramref name="obj" /> parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:Gemstone.Data.Model.RecordRestriction.FilterExpression">
      <summary>
            Defines filter SQL expression for restriction as a composite format string - does not
            include WHERE. When escaping is needed for field names, use standard ANSI quotes.
            </summary>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format string will be converted into
            query parameters where each of the corresponding values in the <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" />
            collection will be applied as <see cref="T:System.Data.IDbDataParameter" /> values to an executed
            <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.GetHashCode">
      <summary>
            Serves as the default hash function.
            </summary>
      <returns>A hash code for the current <see cref="T:Gemstone.Data.Model.RecordRestriction" />.</returns>
    </member>
    <member name="P:Gemstone.Data.Model.RecordRestriction.Item(System.Int32)">
      <summary>
            Gets or sets <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" /> field value for the specified <paramref name="index" />.
            </summary>
      <param name="index">Index into <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" /> field array.</param>
      <returns>
        <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" /> field value for the specified <paramref name="index" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.op_Addition(Gemstone.Data.Model.RecordRestriction,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Combines two record restrictions with an AND condition.
            </summary>
      <param name="left">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> left operand.</param>
      <param name="right">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> right operand.</param>
      <returns>New combined record restriction.</returns>
      <remarks>
            If both parameters are <c>null</c>, result will be <c>null</c>. If one parameter is <c>null</c>
            and the other parameter is not, the non-null parameter will be returned. Equally, if the
            <see cref="F:Gemstone.Data.Model.RecordRestriction.FilterExpression" /> of both parameters are <c>null</c>, empty or only whitespace,
            then the result will be <c>null</c>. If one parameter has a filter expression that is
            <c>null</c>, empty or whitespace and the other parameter's filter expression is defined, then
            the parameter that has a filter expression will be returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.op_BitwiseAnd(Gemstone.Data.Model.RecordRestriction,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Combines two record restrictions with an AND condition.
            </summary>
      <param name="left">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> left operand.</param>
      <param name="right">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> right operand.</param>
      <returns>New combined record restriction.</returns>
      <remarks>
            If both parameters are <c>null</c>, result will be <c>null</c>. If one parameter is <c>null</c>
            and the other parameter is not, the non-null parameter will be returned. Equally, if the
            <see cref="F:Gemstone.Data.Model.RecordRestriction.FilterExpression" /> of both parameters are <c>null</c>, empty or only whitespace,
            then the result will be <c>null</c>. If one parameter has a filter expression that is
            <c>null</c>, empty or whitespace and the other parameter's filter expression is defined, then
            the parameter that has a filter expression will be returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.op_BitwiseOr(Gemstone.Data.Model.RecordRestriction,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Combines two record restrictions with an OR condition.
            </summary>
      <param name="left">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> left operand.</param>
      <param name="right">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> right operand.</param>
      <returns>New combined record restriction.</returns>
      <remarks>
            If both parameters are <c>null</c>, result will be <c>null</c>. If one parameter is <c>null</c>
            and the other parameter is not, the non-null parameter will be returned. Equally, if the
            <see cref="F:Gemstone.Data.Model.RecordRestriction.FilterExpression" /> of both parameters are <c>null</c>, empty or only whitespace,
            then the result will be <c>null</c>. If one parameter has a filter expression that is
            <c>null</c>, empty or whitespace and the other parameter's filter expression is defined, then
            the parameter that has a filter expression will be returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.op_Equality(Gemstone.Data.Model.RecordRestriction,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Compares to record restrictions for equality.
            </summary>
      <param name="left">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> left operand.</param>
      <param name="right">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> right operand.</param>
      <returns>
        <c>true</c> if record restrictions are equal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.op_Implicit(System.String)~Gemstone.Data.Model.RecordRestriction">
      <summary>
            Implicitly converts a <see cref="T:System.String" /> based filter expression into a <see cref="T:Gemstone.Data.Model.RecordRestriction" />.
            </summary>
      <param name="value">Operand.</param>
      <returns>Record operation representing the specified filter expression.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.RecordRestriction.op_Inequality(Gemstone.Data.Model.RecordRestriction,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Compares to record restrictions for inequality.
            </summary>
      <param name="left">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> left operand.</param>
      <param name="right">
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> right operand.</param>
      <returns>
        <c>true</c> if record restrictions are not equal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:Gemstone.Data.Model.RecordRestriction.Parameters">
      <summary>
            Defines restriction parameter values.
            </summary>
      <remarks>
            If any of the <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" /> reference a table field that is modeled with either an
            <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the
            target parameter with the returned value so that the field value will be properly set prior
            to executing any database function.
            </remarks>
    </member>
    <member name="T:Gemstone.Data.Model.RootQueryRestrictionAttribute">
      <summary>
            Defines an attribute that will mark a modeled table with a record restriction that applies
            to all query functions for modeled <see cref="T:Gemstone.Data.Model.TableOperations`1" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.RootQueryRestrictionAttribute.#ctor(System.String,System.Object[])">
      <summary>
            Creates a new parameterized <see cref="T:Gemstone.Data.Model.RootQueryRestrictionAttribute" /> with the specified
            SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
      </remarks>
    </member>
    <member name="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.ApplyToDeletes">
      <summary>
            Gets or sets flag that determines if root query restriction should be applied to delete operations.
            </summary>
      <remarks>
            If root query restriction only references primary key fields, then this property value should
            be set to <c>false</c> since default delete operations for a modeled record already work against
            primary key fields.
            </remarks>
    </member>
    <member name="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.ApplyToUpdates">
      <summary>
            Gets or sets flag that determines if root query restriction should be applied to update operations.
            </summary>
      <remarks>
            If root query restriction only references primary key fields, then this property value should
            be set to <c>false</c> since default update operations for a modeled record already work against
            primary key fields.
            </remarks>
    </member>
    <member name="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.FilterExpression">
      <summary>
            Defines filter SQL expression for restriction as a composite format string - does not
            include WHERE. When escaping is needed for field names, use standard ANSI quotes.
            </summary>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format string will be converted into
            query parameters where each of the corresponding values in the <see cref="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.Parameters" />
            collection will be applied as <see cref="T:System.Data.IDbDataParameter" /> values to an executed
            <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
      </remarks>
    </member>
    <member name="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.Parameters">
      <summary>
            Defines restriction parameter values.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.SearchableAttribute">
      <summary>
            Defines an attribute that will mark additional fields in the database as searchable field.
            </summary>
      <remarks>
            All modeled fields are automatically searchable so this only applies to fields that are not modeled.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.SearchableAttribute.#ctor(System.String[])">
      <summary>
            Defines an attribute that will mark additional fields in the database as searchable field.
            </summary>
      <param name="fields">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fields</parameter>
            <parameter>M:Gemstone.Data.Model.SearchableAttribute.#ctor(System.String[])</parameter>
          </include>
        </markup>
      </param>
      <remarks>
            All modeled fields are automatically searchable so this only applies to fields that are not modeled.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.SearchableAttribute.FieldNames">
      <summary>
            The field names that are searchable.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.SearchExtensionAttribute">
      <summary>
            Defines an attribute that marks methods that are used to transform <see cref="T:Gemstone.Data.Model.IRecordFilter" /> into <see cref="T:Gemstone.Data.Model.RecordRestriction" />.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.SearchExtensionAttribute.#ctor(System.String)">
      <summary>
            Defines an attribute that marks methods that are used to transform <see cref="T:Gemstone.Data.Model.IRecordFilter" /> into <see cref="T:Gemstone.Data.Model.RecordRestriction" />.
            </summary>
      <param name="fieldMatch">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fieldMatch</parameter>
            <parameter>M:Gemstone.Data.Model.SearchExtensionAttribute.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Gemstone.Data.Model.SearchExtensionAttribute.FieldMatch">
      <summary>
            The string used to match FieldNames this applies to.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.StatementTypes">
      <summary>
            Statement types for amendment application.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.StatementTypes.Select">
      <summary>
            Apply amendment to all SELECT statements, i.e., <see cref="F:Gemstone.Data.Model.StatementTypes.SelectCount" />, <see cref="F:Gemstone.Data.Model.StatementTypes.SelectSet" /> and <see cref="F:Gemstone.Data.Model.StatementTypes.SelectRow" />.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.StatementTypes.SelectCount">
      <summary>
            Apply amendment to SELECT COUNT statements.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.StatementTypes.SelectSet">
      <summary>
            Apply amendment to SELECT statements that can return multiple rows of data.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.StatementTypes.SelectRow">
      <summary>
            Apply amendment to SELECT statements that will return a single row of data.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.StatementTypes.Insert">
      <summary>
            Apply amendment to INSERT statements.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.StatementTypes.Update">
      <summary>
            Apply amendment to UPDATE statements.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.StatementTypes.Delete">
      <summary>
            Apply amendment to DELETE statements.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.TableNameAttribute">
      <summary>
            Defines an attribute that will allow a custom table name for a modeled table instead of using
            the class name.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.TableNameAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.TableNameAttribute" />.
            </summary>
      <param name="tableName">Table name to use for class.</param>
    </member>
    <member name="P:Gemstone.Data.Model.TableNameAttribute.TableName">
      <summary>
            Gets field name to use for property.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.TableOperations`1">
      <summary>
            Defines database operations for a modeled table.
            </summary>
      <typeparam name="T">Modeled table.</typeparam>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.#ctor(Gemstone.Data.AdoDataConnection,System.Action{System.Exception},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.TableOperations`1" /> using provided <paramref name="exceptionHandler" />.
            </summary>
      <param name="connection">
        <see cref="T:Gemstone.Data.AdoDataConnection" /> instance to use for database operations.</param>
      <param name="exceptionHandler">Delegate to handle table operation exceptions.</param>
      <param name="customTokens">Custom run-time tokens to apply to any modeled <see cref="T:Gemstone.Data.Model.AmendExpressionAttribute" /> values.</param>
      <remarks>
        <para>
            When exception handler is provided, table operations will not throw exceptions for database calls, any
            encountered exceptions will be passed to handler for processing.
            </para>
        <para>
            The <paramref name="customTokens" /> can be used to apply run-time tokens to any defined <see cref="T:Gemstone.Data.Model.AmendExpressionAttribute" /> values,
            for example, given the following amendment expression applied to a modeled class:
            <code language="cs">
            [AmendExpression("TOP {count}", 
                TargetExpression = TargetExpression.FieldList,
                AffixPosition = AffixPosition.Prefix,
                StatementTypes = StatementTypes.SelectSet)]]
            </code>
            The <paramref name="customTokens" /> key/value pairs could be set as follows at run-time:
            <code>
            int count = 200;
            customTokens = new[] { new KeyValuePair&lt;string, string&gt;("{count}", $"{count}") };
            </code></para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connection" /> cannot be <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.#ctor(Gemstone.Data.AdoDataConnection,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.TableOperations`1" />.
            </summary>
      <param name="connection">
        <see cref="T:Gemstone.Data.AdoDataConnection" /> instance to use for database operations.</param>
      <param name="customTokens">Custom run-time tokens to apply to any modeled <see cref="T:Gemstone.Data.Model.AmendExpressionAttribute" /> values.</param>
      <remarks>
            The <paramref name="customTokens" /> can be used to apply run-time tokens to any defined <see cref="T:Gemstone.Data.Model.AmendExpressionAttribute" /> values,
            for example, given the following amendment expression applied to a modeled class:
            <code>
            [AmendExpression("TOP {count}", 
                TargetExpression = TargetExpression.FieldList,
                AffixPosition = AffixPosition.Prefix,
                StatementTypes = StatementTypes.SelectSet)]]
            </code>
            The <paramref name="customTokens" /> key/value pairs could be set as follows at run-time:
            <code>
            int count = 200;
            customTokens = new[] { new KeyValuePair&lt;string, string&gt;("{count}", $"{count}") };
            </code></remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connection" /> cannot be <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.AddNewOrUpdateRecord(`0)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database if the
            record has not defined any of its primary key values; otherwise, the database will
            be updated with the specified modeled table <paramref name="record" />.
            </summary>
      <param name="record">Record to add or update.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.AddNewOrUpdateRecordAsync(`0,System.Threading.CancellationToken)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database if the
            record has not defined any of its primary key values; otherwise, the database will
            be updated with the specified modeled table <paramref name="record" />.
            </summary>
      <param name="record">Record to add or update.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.AddNewRecord(System.Data.DataRow)">
      <summary>
            Adds the specified <paramref name="row" /> to the database.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be added.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.AddNewRecord(`0)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database.
            </summary>
      <param name="record">Record to add.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.AddNewRecordAsync(System.Data.DataRow,System.Threading.CancellationToken)">
      <summary>
            Adds the specified <paramref name="row" /> to the database.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be added.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.AddNewRecordAsync(`0,System.Threading.CancellationToken)">
      <summary>
            Adds the specified modeled table <paramref name="record" /> to the database.
            </summary>
      <param name="record">Record to add.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordDefaults(`0)">
      <summary>
            Applies the default values on the specified modeled table <paramref name="record" />
            where any of the properties are marked with either <see cref="T:System.ComponentModel.DefaultValueAttribute" />
            or <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />.
            </summary>
      <param name="record">Record to update.</param>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordDefaultsFunction">
      <summary>
            Gets a delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordDefaults(`0)" /> method for specified type <typeparamref name="T" />.
            </summary>
      <returns>Delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordDefaults(`0)" /> method.</returns>
      <remarks>
            This method is useful to apply defaults values to an existing type <typeparamref name="T" /> instance when no data
            connection is available, applying any modeled default values as specified by a <see cref="T:System.ComponentModel.DefaultValueAttribute" />
            or <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" /> on the model properties.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordUpdates(`0)">
      <summary>
            Applies the update values on the specified modeled table <paramref name="record" /> where
            any of the properties are marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" />.
            </summary>
      <param name="record">Record to update.</param>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordUpdatesFunction">
      <summary>
            Gets a delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordUpdates(`0)" /> method for specified type <typeparamref name="T" />.
            </summary>
      <returns>Delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.ApplyRecordUpdates(`0)" /> method.</returns>
      <remarks>
            This method is useful to apply update values to an existing type <typeparamref name="T" /> instance when no data
            connection is available, applying any modeled update values as specified by instances of the
            <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> on the model properties.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.ApplyRootQueryRestrictionToDeletes">
      <summary>
            Gets or sets flag that determines if <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied to delete operations.
            </summary>
      <remarks>
        <para>
            If <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> only references primary key fields, then this property value should be set
            to <c>false</c> since default delete operations for a modeled record already work against primary key fields.
            </para>
        <para>
            This flag can be manually set per <see cref="T:Gemstone.Data.Model.TableOperations`1" /> instance or handled automatically by marking
            a model with the <see cref="T:Gemstone.Data.Model.RootQueryRestrictionAttribute" /> and assigning a value to the attribute property
            <see cref="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.ApplyToDeletes" />.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.ApplyRootQueryRestrictionToUpdates">
      <summary>
            Gets or sets flag that determines if <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied to update operations.
            </summary>
      <remarks>
        <para>
            If <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> only references primary key fields, then this property value should be set
            to <c>false</c> since default update operations for a modeled record already work against primary key fields.
            </para>
        <para>
            This flag can be manually set per <see cref="T:Gemstone.Data.Model.TableOperations`1" /> instance or handled automatically by marking
            a model with the <see cref="T:Gemstone.Data.Model.RootQueryRestrictionAttribute" /> and assigning a value to the attribute property
            <see cref="F:Gemstone.Data.Model.RootQueryRestrictionAttribute.ApplyToUpdates" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.ClearPrimaryKeyCache">
      <summary>
            Clears the primary key cache for this <see cref="T:Gemstone.Data.Model.ITableOperations" /> instance.
            </summary>
      <remarks>
        <para>
            This method is intended to be used in conjunction with calls to the overloads for
            <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])" /> which are
            used for record pagination.
            </para>
        <para>
            If record set is known to have changed outside purview of this class, this method
            should be called so that primary key cache can be reloaded.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.Connection">
      <summary>
            Gets <see cref="T:Gemstone.Data.AdoDataConnection" /> instance associated with this <see cref="T:Gemstone.Data.Model.TableOperations`1" /> used for database operations.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecord(Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})">
      <summary>
            Deletes the records referenced by the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToDeletes" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="restriction" /> cannot be <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecord(System.Data.DataRow)">
      <summary>
            Deletes the record referenced by the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be deleted.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecord(System.Object[])">
      <summary>
            Deletes the record referenced by the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecord(`0)">
      <summary>
            Deletes the specified modeled table <paramref name="record" /> from the database.
            </summary>
      <param name="record">Record to delete.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecordAsync(Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
      <summary>
            Deletes the records referenced by the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.ITableOperations.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.ITableOperations.ApplyRootQueryRestrictionToDeletes" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="restriction" /> cannot be <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecordAsync(System.Data.DataRow,System.Threading.CancellationToken)">
      <summary>
            Deletes the record referenced by the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be deleted.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecordAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>
            Deletes the record referenced by the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecordAsync(`0,System.Threading.CancellationToken)">
      <summary>
            Deletes the specified modeled table <paramref name="record" /> from the database.
            </summary>
      <param name="record">Record to delete.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>Number of rows affected.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecordWhere(System.String,System.Object[])">
      <summary>
            Deletes the records referenced by the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.DeleteRecordWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Deletes the records referenced by the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.ExceptionHandler">
      <summary>
            Gets or sets delegate used to handle table operation exceptions.
            </summary>
      <remarks>
            When exception handler is provided, table operations will not throw exceptions for database calls, any
            encountered exceptions will be passed to handler for processing. Otherwise, exceptions will be thrown
            on the call stack.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.FieldHasAttribute``1(System.String)">
      <summary>
            Determines if the specified field has an associated attribute.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <typeparam name="TAttribute">Type of attribute to search for.</typeparam>
      <returns>
        <c>true</c> if field has attribute; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.FieldHasAttribute(System.String,System.Type)">
      <summary>
            Determines if the specified field has an associated attribute.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <param name="attributeType">Type of attribute to search for.</param>
      <returns>
        <c>true</c> if field has attribute; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not an <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetFieldNames(System.Boolean)">
      <summary>
            Gets the field names for the table; if <paramref name="escaped" /> is <c>true</c>, also includes any escaping as defined in model.
            </summary>
      <param name="escaped">Flag that determines if field names should include any escaping as defined in the model; defaults to <c>true</c>.</param>
      <returns>Array of field names.</returns>
      <remarks>
            A field name will only be escaped if the model requested escaping with the <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetFieldType(System.String)">
      <summary>
            Gets the <see cref="T:System.Type" /> for the specified field.
            </summary>
      <param name="fieldName">Field name to retrieve.</param>
      <returns>Field <see cref="T:System.Type" /> or <c>null</c> if field is not found.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetFieldValue(`0,System.String)">
      <summary>
            Gets the value for the specified field.
            </summary>
      <param name="record">Modeled table record.</param>
      <param name="fieldName">Field name to retrieve.</param>
      <returns>Field value or <c>null</c> if field is not found.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)">
      <summary>
            Gets the interpreted value for the specified field, encrypting or returning any intermediate <see cref="T:System.Data.IDbDataParameter" />
            value as needed.
            </summary>
      <param name="fieldName">Field name to retrieve.</param>
      <param name="value">Field value to use.</param>
      <returns>
            Interpreted value for the specified field, encrypting or returning any intermediate <see cref="T:System.Data.IDbDataParameter" /> value
            as needed.
            </returns>
      <remarks>
        <para>
            This function will need to be used when calling overloads that take a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> or composite format
            filter expression where the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" /> have been modeled
            on a field referenced by one of the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameters. Since the record restrictions are used
            with a free-form expression, the <see cref="T:Gemstone.Data.Model.TableOperations`1" /> class cannot be aware of the fields accessed in the
            expression without attempting to parse the expression which would be time-consuming and error-prone; as a result, users
            will need to be aware to call this function when using record restriction that references fields that are either marked
            for encryption or use a specific field data-type attribute.
            </para>
        <para>
            If a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter references a field that is modeled with an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            this function will need to be called, replacing the restriction parameter with the returned value, so that the field data
            value will be properly encrypted prior to executing the database function.
            </para>
        <para>
            If a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter references a field that is modeled with a <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />,
            this function will need to be called, replacing the restriction parameter with the returned value, so that the field data
            type will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetPageOfRecords(`0[],System.Int32,System.Int32)">
      <summary>
            Gets the specified <paramref name="page" /> of records from the provided source <paramref name="records" /> array.
            </summary>
      <param name="records">Source records array.</param>
      <param name="page">Desired page of records.</param>
      <param name="pageSize">Desired page size.</param>
      <returns>A page of records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetPageOfRecordsAsync(System.Collections.Generic.IAsyncEnumerable{`0},System.Int32,System.Int32)">
      <summary>
            Gets the specified <paramref name="page" /> of records from the provided source <paramref name="records" /> array.
            </summary>
      <param name="records">Source records array.</param>
      <param name="page">Desired page of records.</param>
      <param name="pageSize">Desired page size.</param>
      <returns>A page of records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetPrimaryKeyCacheSize">
      <summary>
            Calculates the size of the current primary key cache, in number of records.
            </summary>
      <returns>Number of records in the current primary key cache.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetPrimaryKeyFieldNames(System.Boolean)">
      <summary>
            Get the primary key field names for the table; if <paramref name="escaped" /> is <c>true</c>, also includes any escaping as defined in model.
            </summary>
      <param name="escaped">Flag that determines if field names should include any escaping as defined in the model; defaults to <c>true</c>.</param>
      <returns>Array of primary key field names.</returns>
      <remarks>
            A field name will only be escaped if the model requested escaping with the <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetPrimaryKeys(System.Data.DataRow)">
      <summary>
            Gets the primary key values from the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data.</param>
      <returns>Primary key values from the specified <paramref name="row" />.</returns>
      <remarks>
            Function returns raw data from <paramref name="row" /> without interpretation, it may be
            necessary to call <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> for models with primary key
            fields that are marked with either <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or
            <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetPrimaryKeys(`0)">
      <summary>
            Gets the primary key values from the specified <paramref name="record" />.
            </summary>
      <param name="record">Record of data to retrieve primary keys from.</param>
      <returns>Primary key values from the specified <paramref name="record" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Generates a <see cref="T:Gemstone.Data.Model.RecordRestriction" /> based on <paramref name="recordFilters" />.
            </summary>
      <param name="recordFilters">
        <see cref="T:Gemstone.Data.Model.IRecordFilter" /> to search.</param>
      <returns>
        <see cref="T:Gemstone.Data.Model.RecordRestriction" /> based on fields marked with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />, Property Names and specified <paramref name="recordFilters" />.
            </returns>
      <remarks>
            Any fields marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> will be automatically managed, i.e.,
            the returned <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameters will already apply any field based encryption as needed. Database query functions
            executed for fields marked for encryption will only be searched using = and =/= , regardless of any otherwise
            specified value in the <see cref="T:Gemstone.Data.Model.IRecordFilter" /> as encryption is handled locally. However, the <see cref="M:Gemstone.Data.Model.ITableOperations.SearchRecords(System.String,System.Boolean,System.StringComparison,Gemstone.Data.Model.IRecordFilter[])" /> function
            can be used to find data in encrypted fields that are marked for search with other limits.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.HasPrimaryKeyIdentityField">
      <summary>
            Gets flag that determines if modeled table has a primary key that is an identity field.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.LoadRecord(System.Data.DataRow)">
      <summary>
            Creates a new modeled table record queried from the specified <paramref name="row" />.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be loaded.</param>
      <returns>New modeled table record queried from the specified <paramref name="row" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.LoadRecord(System.Object[])">
      <summary>
            Creates a new modeled table record queried from the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>New modeled table record queried from the specified <paramref name="primaryKeys" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.LoadRecordAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>
            Creates a new modeled table record queried from the specified <paramref name="primaryKeys" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="primaryKeys">Primary keys values of the record to load.</param>
      <returns>New modeled table record queried from the specified <paramref name="primaryKeys" />.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.LoadRecordFunction">
      <summary>
            Gets a delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.LoadRecord(System.Data.DataRow)" /> function for specified type <typeparamref name="T" />.
            </summary>
      <returns>Delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.LoadRecord(System.Data.DataRow)" /> function.</returns>
      <remarks>
            This method is useful to deserialize a <see cref="T:System.Data.DataRow" /> into a type <typeparamref name="T" /> instance
            when no data connection is available, e.g., when using a deserialized <see cref="T:System.Data.DataSet" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.NewRecord">
      <summary>
            Creates a new modeled record instance, applying any modeled default values as specified by a
            <see cref="T:System.ComponentModel.DefaultValueAttribute" /> or <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" /> on the
            model properties.
            </summary>
      <returns>New modeled record instance with any defined default values applied.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.NewRecordFunction">
      <summary>
            Gets a delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.NewRecord" /> function for specified type <typeparamref name="T" />.
            </summary>
      <returns>Delegate for the <see cref="M:Gemstone.Data.Model.TableOperations`1.NewRecord" /> function.</returns>
      <remarks>
            This method is useful to create a new type <typeparamref name="T" /> instance when no data connection
            is available, applying any modeled default values as specified by a <see cref="T:System.ComponentModel.DefaultValueAttribute" />
            or <see cref="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" /> on the model properties.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.PrimaryKeyCache">
      <summary>
            Gets or sets primary key cache.
            </summary>
      <remarks>
        <para>
            The <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])" /> overloads that include paging parameters
            cache the sorted and filtered primary keys of queried records between calls so that paging is fast and
            efficient. Since the primary keys are cached, an instance of the <see cref="T:Gemstone.Data.Model.TableOperations`1" /> should
            exist per user session when using query functions that support pagination. In web based implementations,
            the primary cache should be stored with user session state data and then restored between instances of
            the <see cref="T:Gemstone.Data.Model.TableOperations`1" /> that are created along with a connection that is opened per page.
            </para>
        <para>
            The function <see cref="M:Gemstone.Data.Model.ITableOperations.ClearPrimaryKeyCache" /> should be called to manually clear cache when table
            contents are known to have changed. Note that calls to any <see cref="M:Gemstone.Data.Model.ITableOperations.DeleteRecord(System.Object)" /> overload
            will automatically clear any existing primary key cache.
            </para>
        <para>
            Primary keys values are stored in data table without interpretation, i.e., in their raw form as queried
            from the database. Primary key data in cache will be encrypted for models with primary key fields that
            are marked with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /></para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecord(Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecord(System.String,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />,
            execution of query will apply <paramref name="orderByExpression" />.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordAsync(Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordAsync(System.String,Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns a single modeled table record for the specified <paramref name="restriction" />,
            execution of query will apply <paramref name="orderByExpression" />.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified <paramref name="restriction" />, <c>null</c> will be returned.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCount">
      <summary>
            Gets total record count for the modeled table.
            </summary>
      <returns>
            Total record count for the modeled table.
            </returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCount(Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Gets the record count for the modeled table based on search parameter.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="recordFilter">
        <see cref="T:Gemstone.Data.Model.IRecordFilter" /> to be filtered by</param>
      <returns>Record count for the modeled table based on search parameter.</returns>
      <remarks>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.ITableOperations.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /></remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Gets the record count for the specified <paramref name="restrictions" /> - or - total record
            count for the modeled table if <paramref name="restrictions" /> is <c>null</c>.
            </summary>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>
            Record count for the specified <paramref name="restrictions" /> - or - total record count
            for the modeled table if no <see cref="T:Gemstone.Data.Model.RecordRestriction" /> is provided.
            </returns>
      <remarks>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCountAsync(System.Threading.CancellationToken)">
      <summary>
            Gets total record count for the modeled table.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>
            Total record count for the modeled table.
            </returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCountAsync(System.Threading.CancellationToken,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Gets the record count for the modeled table based on search parameter.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="recordFilter">
        <see cref="T:Gemstone.Data.Model.IRecordFilter" /> to be filtered by</param>
      <returns>Record count for the modeled table based on search parameter.</returns>
      <remarks>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.ITableOperations.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /></remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCountAsync(System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Gets the record count for the specified <paramref name="restrictions" /> - or - total record
            count for the modeled table if <paramref name="restrictions" /> is <c>null</c>.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>
            Record count for the specified <paramref name="restrictions" /> - or - total record count
            for the modeled table if no <see cref="T:Gemstone.Data.Model.RecordRestriction" /> is provided.
            </returns>
      <remarks>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCountWhere(System.String,System.Object[])">
      <summary>
            Gets the record count for the modeled table for the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Record count for the modeled table for the specified parameters.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordCountWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Gets the record count for the modeled table for the specified SQL filter expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Record count for the modeled table for the specified parameters.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.QueryRecordCount(Gemstone.Data.Model.RecordRestriction[])" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Queries database and returns modeled table records for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)">
      <summary>
            Queries database and returns modeled table records for the specified parameters.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="limit">Limit of number of record to return.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            If no record <paramref name="restriction" /> or <paramref name="limit" /> is provided, all rows will be returned.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.TableOperations`1.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting, paging and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.TableOperations`1.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.TableOperations`1.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /> using <paramref name="recordFilters" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.TableOperations`1.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordsAsync(Gemstone.Data.Model.RecordRestriction,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns modeled table records for the specified <paramref name="restriction" />.
            </summary>
      <param name="restriction">Record restriction to apply.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordsAsync(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns modeled table records for the specified parameters.
            </summary>
      <param name="orderByExpression">Field name expression used for sort order, include ASC or DESC as needed - does not include ORDER BY; defaults to primary keys.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="limit">Limit of number of record to return.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            If no record <paramref name="restriction" /> or <paramref name="limit" /> is provided, all rows will be returned.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordsAsync(System.String,System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.TableOperations`1.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordsAsync(System.String,System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting, paging and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.TableOperations`1.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.RecordRestriction[])" /> where restriction
            is generated by <see cref="M:Gemstone.Data.Model.TableOperations`1.GetSearchRestrictions(Gemstone.Data.Model.IRecordFilter[])" /> using <paramref name="recordFilters" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordsAsync(System.String,System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction[])">
      <summary>
            Queries database and returns modeled table records for the specified sorting and paging parameters.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="page">Page number of records to return (1-based).</param>
      <param name="pageSize">Current page size.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restrictions">Record restrictions to apply, if any.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            This function is used for record paging. Primary keys are cached server-side, typically per user session,
            to maintain desired per-page sort order. Call <see cref="M:Gemstone.Data.Model.TableOperations`1.ClearPrimaryKeyCache" /> to manually clear cache
            when table contents are known to have changed.
            </para>
        <para>
            If any of the <paramref name="restrictions" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If the specified <paramref name="sortField" /> has been marked with <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />,
            establishing the primary key cache operation will take longer to execute since query data will need to
            be downloaded locally and decrypted so the proper sort order can be determined.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordsWhere(System.String,System.Object[])">
      <summary>
            Queries database and returns modeled table records for the specified SQL filter expression
            and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordsWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Queries database and returns modeled table records for the specified SQL filter expression
            and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>An enumerable of modeled table row instances for queried records.</returns>
      <remarks>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" /> only
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordWhere(System.String,System.Object[])">
      <summary>
            Queries database and returns a single modeled table record for the specified SQL filter
            expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified filter expression and parameters, <c>null</c> will be returned.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.QueryRecordWhereAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Queries database and returns a single modeled table record for the specified SQL filter
            expression and parameters.
            </summary>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>A single modeled table record for the queried record.</returns>
      <remarks>
        <para>
            If no record is found for specified filter expression and parameters, <c>null</c> will be returned.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,Gemstone.Data.Model.RecordRestriction,System.Int32)" />
            specifying the <see cref="T:Gemstone.Data.Model.RecordRestriction" /> parameter with a limit of 1 record.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.RootQueryRestriction">
      <summary>
            Gets or sets root record restriction that applies to query table operations.
            </summary>
      <remarks>
        <para>
            Defining a root query restriction creates a base query filter that gets applied to all query operations,
            even when another restriction is applied - in this case the root restriction will be pre-pended to the
            specified query, e.g.:
            <code>
            restriction = RootQueryRestriction + restriction;
            </code>
            A root query restriction is useful to apply a common state to the query operations, e.g., always
            filtering records for a specific user or context.
            </para>
        <para>
            A root query restriction can be manually assigned to a <see cref="T:Gemstone.Data.Model.TableOperations`1" /> instance or
            automatically assigned by marking a model with the <see cref="T:Gemstone.Data.Model.RootQueryRestrictionAttribute" />.
            </para>
        <para>
            If any of the <see cref="F:Gemstone.Data.Model.RecordRestriction.Parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.SearchRecords(System.String,System.Boolean,System.StringComparison,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Locally searches retrieved table records after queried from database for the specified sorting and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            Function only typically used for record models that apply the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="comparison">
        <see cref="T:System.StringComparison" /> to use when searching string fields; defaults to ordinal ignore case.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An array of modeled table row instances for the queried records that match the search.</returns>
      <remarks>
        <para>
            This function searches records locally after query from database, this way Search functionality will work
            even with fields that are modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> and use restrictions not being = or =/=.
            Primary keys for this function will not be cached server-side and this function will be slower and more expensive than similar calls
            to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])" />. Usage should be restricted to cases searching for field data that has
            been modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </para>
        <para>
            This function does not paginate records, instead a full list of search records is returned. User can cache returned records and page
            through them using the <see cref="M:Gemstone.Data.Model.TableOperations`1.GetPageOfRecords(`0[],System.Int32,System.Int32)" /> function. As a result, usage should be restricted to smaller data sets. 
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.SearchRecordsAsync(System.String,System.Boolean,System.Threading.CancellationToken,System.StringComparison,Gemstone.Data.Model.IRecordFilter[])">
      <summary>
            Locally searches retrieved table records after queried from database for the specified sorting and search parameters.
            Search executed against fields modeled with <see cref="T:Gemstone.Data.Model.SearchableAttribute" />.
            Function only typically used for record models that apply the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </summary>
      <param name="sortField">Field name to order-by.</param>
      <param name="ascending">Sort ascending flag; set to <c>false</c> for descending.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="comparison">
        <see cref="T:System.StringComparison" /> to use when searching string fields; defaults to ordinal ignore case.</param>
      <param name="recordFilters">Record Filters to be applied.</param>
      <returns>An array of modeled table row instances for the queried records that match the search.</returns>
      <remarks>
        <para>
            This function searches records locally after query from database, this way Search functionality will work
            even with fields that are modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> and use restrictions not being = or =/=.
            Primary keys for this function will not be cached server-side and this function will be slower and more expensive than similar calls
            to <see cref="M:Gemstone.Data.Model.TableOperations`1.QueryRecords(System.String,System.Boolean,System.Int32,System.Int32,Gemstone.Data.Model.IRecordFilter[])" />. Usage should be restricted to cases searching for field data that has
            been modeled with the <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" />.
            </para>
        <para>
            This function does not paginate records, instead a full list of search records is returned. User can cache returned records and page
            through them using the <see cref="M:Gemstone.Data.Model.TableOperations`1.GetPageOfRecordsAsync(System.Collections.Generic.IAsyncEnumerable{`0},System.Int32,System.Int32)" /> function. As a result, usage should be restricted to smaller data sets. 
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.TableName">
      <summary>
            Gets the table name defined for the modeled table, includes any escaping as defined in model.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.ToDataTable(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Converts the given collection of <paramref name="records" /> into a <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="records">The collection of records to be inserted into the data table.</param>
      <returns>A data table containing data from the given records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.ToDataTableAsync(System.Collections.Generic.IAsyncEnumerable{`0},System.Threading.CancellationToken)">
      <summary>
            Converts the given collection of <paramref name="records" /> into a <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="records">The collection of records to be inserted into the data table.</param>
      <returns>A data table containing data from the given records.</returns>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.TryGetFieldAttribute(System.String,System.Type,System.Attribute@)">
      <summary>
            Attempts to get the specified <paramref name="attributeType" /> for a field.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <param name="attributeType">Type of attribute to attempt to get.</param>
      <param name="attribute">Attribute that was found, if any.</param>
      <returns>
        <c>true</c> if attribute was found; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not an <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.TryGetFieldAttribute``1(System.String,``0@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> for a field.
            </summary>
      <param name="fieldName">Name of field to use for attribute lookup.</param>
      <param name="attribute">Attribute that was found, if any.</param>
      <typeparam name="TAttribute">Type of attribute to attempt to get.</typeparam>
      <returns>
        <c>true</c> if attribute was found; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.TypeRegistry">
      <summary>
            Gets or sets <see cref="T:Gemstone.Expressions.Evaluator.TypeRegistry" /> instance used for evaluating encountered instances
            of the <see cref="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" /> on modeled table properties.
            </summary>
      <remarks>
            Accessing this property will create a unique type registry for the current type <typeparamref name="T" /> which
            will initially contain the values found in the <see cref="P:Gemstone.Expressions.Model.ValueExpressionParser.DefaultTypeRegistry" />
            and can be augmented with custom types. Set to <c>null</c> to restore use of the default type registry.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.UnescapedTableName">
      <summary>
            Gets the table name defined for the modeled table without any escape characters.
            </summary>
      <remarks>
            A table name will only be escaped if the model requested escaping with the <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecord(System.Data.DataRow,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Updates the database with the specified <paramref name="row" />, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecord(`0,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />,
            any model properties marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will
            be evaluated and applied before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.TableOperations`1.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.TableOperations`1.ApplyRootQueryRestrictionToUpdates" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecordAsync(System.Data.DataRow,System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction)">
      <summary>
            Updates the database with the specified <paramref name="row" />, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecordAsync(`0,System.Threading.CancellationToken,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />,
            any model properties marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will
            be evaluated and applied before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="restriction">Record restriction to apply, if any.</param>
      <param name="applyRootQueryRestriction">
            Flag that determines if any existing <see cref="P:Gemstone.Data.Model.TableOperations`1.RootQueryRestriction" /> should be applied. Defaults to
            <see cref="P:Gemstone.Data.Model.TableOperations`1.ApplyRootQueryRestrictionToUpdates" /> setting.
            </param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            If any of the <paramref name="restriction" /> parameters reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecordWhere(System.Data.DataRow,System.String,System.Object[])">
      <summary>
            Updates the database with the specified <paramref name="row" /> referenced by the
            specified SQL filter expression and parameters, any model properties marked with
            <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied before
            the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Data.DataRow,Gemstone.Data.Model.RecordRestriction)" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecordWhere(`0,System.String,System.Object[])">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />
            referenced by the specified SQL filter expression and parameters, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.UpdateRecord(`0,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecordWhereAsync(System.Data.DataRow,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Updates the database with the specified <paramref name="row" /> referenced by the
            specified SQL filter expression and parameters, any model properties marked with
            <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied before
            the record is provided to the data source.
            </summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> of queried data to be updated.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.ITableOperations.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.ITableOperations.UpdateRecord(System.Data.DataRow,Gemstone.Data.Model.RecordRestriction)" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.TableOperations`1.UpdateRecordWhereAsync(`0,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>
            Updates the database with the specified modeled table <paramref name="record" />
            referenced by the specified SQL filter expression and parameters, any model properties
            marked with <see cref="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" /> will be evaluated and applied
            before the record is provided to the data source.
            </summary>
      <param name="record">Record to update.</param>
      <param name="filterExpression">
            Filter SQL expression for restriction as a composite format string - does not include WHERE.
            When escaping is needed for field names, use standard ANSI quotes.
            </param>
      <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
      <param name="parameters">Restriction parameter values.</param>
      <returns>Number of rows affected.</returns>
      <remarks>
        <para>
            Record restriction is only used for custom update expressions or in cases where modeled
            table has no defined primary keys.
            </para>
        <para>
            Each indexed parameter, e.g., "{0}", in the composite format <paramref name="filterExpression" />
            will be converted into query parameters where each of the corresponding values in the
            <paramref name="parameters" /> collection will be applied as <see cref="T:System.Data.IDbDataParameter" />
            values to an executed <see cref="T:System.Data.IDbCommand" /> query.
            </para>
        <para>
            If any of the specified <paramref name="parameters" /> reference a table field that is modeled with
            either an <see cref="T:Gemstone.Data.Model.EncryptDataAttribute" /> or <see cref="T:Gemstone.Data.Model.FieldDataTypeAttribute" />, then the function
            <see cref="M:Gemstone.Data.Model.TableOperations`1.GetInterpretedFieldValue(System.String,System.Object)" /> will need to be called, replacing the target parameter with the
            returned value so that the field value will be properly set prior to executing the database function.
            </para>
        <para>
            If needed, field names that are escaped with standard ANSI quotes in the filter expression
            will be updated to reflect what is defined in the user model.
            </para>
        <para>
            This is a convenience call to <see cref="M:Gemstone.Data.Model.TableOperations`1.UpdateRecord(`0,Gemstone.Data.Model.RecordRestriction,System.Nullable{System.Boolean})" />.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.TableOperations`1.UseCaseSensitiveFieldNames">
      <summary>
            Gets or sets flag that determines if field names should be treated as case-sensitive. Defaults to <c>false</c>.
            </summary>
      <remarks>
            In cases where modeled table fields have applied <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" />, this flag will be used
            to properly update escaped field names that may be case-sensitive. For example, escaped field names in Oracle
            are case-sensitive. This value is typically <c>false</c>.
            </remarks>
    </member>
    <member name="T:Gemstone.Data.Model.TargetExpression">
      <summary>
            Target expressions for amendment application.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.TargetExpression.TableName">
      <summary>
            Apply amendment to table name.
            </summary>
    </member>
    <member name="F:Gemstone.Data.Model.TargetExpression.FieldList">
      <summary>
            Apply amendment to full field list.
            </summary>
    </member>
    <member name="T:Gemstone.Data.Model.UseEscapedNameAttribute">
      <summary>
            Defines an attribute that will request use of the escaped name of a modeled identifier, i.e.,
            a table or field name. Typically needed when identifier names are reserved SQL key words.
            </summary>
      <remarks>
            Applying [UseEscapedName] to a modeled table or field with no parameters will specify that an
            escaped name be used for all database types. Using a specific database type as a parameter
            to the attribute, e.g., [UseEscapedName(DatabaseType.SQLServer)], means the escaped name will
            only be applied to the specific database - however, the attribute allows multiple instances
            on the same identifier so you could specify that escaping only be applied to two databases,
            for example: [UseEscapedName(DatabaseType.SQLServer), UseEscapedName(DatabaseType.MySQL)].
            In the event multiple attributes have been applied to a modeled identifier where one instance
            has specified no target database type and others have, the system will assume to target all
            databases for escaping the name and ignore the specific targets.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.Model.UseEscapedNameAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" /> that will request use of escaped name for any database.
            </summary>
    </member>
    <member name="M:Gemstone.Data.Model.UseEscapedNameAttribute.#ctor(Gemstone.Data.DatabaseType)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.Model.UseEscapedNameAttribute" /> that will request use of escaped name for the
            specified <see cref="T:Gemstone.Data.DatabaseType" />.
            </summary>
      <param name="targetDatabaseType">Target <see cref="T:Gemstone.Data.DatabaseType" /> for escaping identifier.</param>
    </member>
    <member name="P:Gemstone.Data.Model.UseEscapedNameAttribute.TargetDatabaseType">
      <summary>
            Gets target <see cref="T:Gemstone.Data.DatabaseType" /> for using escaped name.
            </summary>
      <remarks>
            When value is <c>null</c>, escaped name will be applied to all database types.
            </remarks>
    </member>
    <member name="P:Gemstone.Data.Model.UseEscapedNameAttribute.UseAnsiQuotes">
      <summary>
            Gets or sets flag that determines if double quotes should be used as the identifier delimiter,
            per SQL-99 standard, regardless of database type. Defaults to <c>true</c> except for MySQL.
            </summary>
      <remarks>
            If <c>true</c>, ANSI standard double-quotes will be used for escaping the identifier; otherwise,
            the escaping identifier will be based on the connected database type.
            </remarks>
    </member>
    <member name="T:Gemstone.Data.SchemaMigration.SchemaMigrationAttribute">
      <summary>
            Defines an attribute that will mark a class as the target of a database schema migration.
            </summary>
      <remarks>
            In Gemstone, use this instead of the Fluent  <see cref="T:FluentMigrator.MigrationAttribute" /> for consistent versioning.
            </remarks>
    </member>
    <member name="M:Gemstone.Data.SchemaMigration.SchemaMigrationAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Data.SchemaMigration.SchemaMigrationAttribute" />.
            </summary>
      <param name="branchNumber">Branch number of the migration.</param>
      <param name="year">Year of the migration.</param>
      <param name="month">Month of the migration.</param>
      <param name="day">Day of the migration.</param>
      <param name="author">Author of the migration.</param>
    </member>
    <member name="P:Gemstone.Data.SchemaMigration.SchemaMigrationAttribute.Author">
      <summary>
            Gets the author of the migration.
            </summary>
    </member>
  </members>
</doc>